{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registrar",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fallbackAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_payPercent",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "MySignalApp__AlreadyClaimed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MySignalApp__InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MySignalApp__InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MySignalApp__NotFallback",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MySignalApp__NotInWhitelist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MySignalApp__NotProvider",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MySignalApp__NotRegistrar",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MySignalApp__TransferFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "AddressProviderChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "signalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "userId",
          "type": "string"
        }
      ],
      "name": "CompensateProvider",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "FallbackChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "FeeChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "ProviderAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ProviderWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "RegistrarChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "id",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "userId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "SingleDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TransferDeposits",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        }
      ],
      "name": "addProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "changeFallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "changeFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "changeRegistrar",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint64",
          "name": "_amount",
          "type": "uint64"
        }
      ],
      "name": "checkInWhitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint64",
          "name": "_amount",
          "type": "uint64"
        }
      ],
      "name": "claimAirdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "fallbackWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFallbacks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "getProviderBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "getReferrerBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRegistrarBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_merkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_payPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "isValidProvider",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_referrer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_signalId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_userId",
          "type": "string"
        }
      ],
      "name": "payProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAddr",
          "type": "address"
        }
      ],
      "name": "providerChangeAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "providerWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referrerWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "registrarWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_airdropBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xefedf5553435e83c116fda3e1865944b3223563f1fc00666aa2fe205d7629194",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "1915732",
    "logsBloom": "0x
    "blockHash": "0x016e05277df718832025f60a916034829a5060a27d76786f55ef05a5d8c03023",
    "transactionHash": "0xefedf5553435e83c116fda3e1865944b3223563f1fc00666aa2fe205d7629194",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0xefedf5553435e83c116fda3e1865944b3223563f1fc00666aa2fe205d7629194",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x0000000000000000000000000000000000000000019cc35c34197330d3000000",
        "logIndex": 0,
        "blockHash": "0x016e05277df718832025f60a916034829a5060a27d76786f55ef05a5d8c03023"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0xefedf5553435e83c116fda3e1865944b3223563f1fc00666aa2fe205d7629194",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005fbdb2315678afecb367f032d93f642f64180aa3"
        ],
        "data": "0x00000000000000000000000000000000000000000000d3c21bcecceda1000000",
        "logIndex": 1,
        "blockHash": "0x016e05277df718832025f60a916034829a5060a27d76786f55ef05a5d8c03023"
      }
    ],
    "blockNumber": 1,
    "cumulativeGasUsed": "1915732",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2D3780568E72EE39137b4D5b49f585fe559410Dc",
    "0x2D3780568E72EE39137b4D5b49f585fe559410Dc",
    "100000000000000000",
    60,
    "0xa0cb11ed77d47b547fea48c53f843b245e05e463b4d2a90991080662148b656f"
  ],
  "numDeployments": 1,
  "solcInputHash": "d1221f5cac7c4cd0c8c8550648b5687b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registrar\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fallbackAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payPercent\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"MySignalApp__AlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MySignalApp__InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MySignalApp__InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MySignalApp__NotFallback\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MySignalApp__NotInWhitelist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MySignalApp__NotProvider\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MySignalApp__NotRegistrar\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MySignalApp__TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"AddressProviderChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"signalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"userId\",\"type\":\"string\"}],\"name\":\"CompensateProvider\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"FallbackChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"FeeChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"ProviderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProviderWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"RegistrarChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"userId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SingleDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferDeposits\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"addProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"changeFallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"changeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"changeRegistrar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint64\",\"name\":\"_amount\",\"type\":\"uint64\"}],\"name\":\"checkInWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint64\",\"name\":\"_amount\",\"type\":\"uint64\"}],\"name\":\"claimAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"fallbackWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFallbacks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getProviderBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getReferrerBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRegistrarBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_payPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isValidProvider\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_signalId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_userId\",\"type\":\"string\"}],\"name\":\"payProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddr\",\"type\":\"address\"}],\"name\":\"providerChangeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"providerWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referrerWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"registrarWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_airdropBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MySignalApp.sol\":\"MySignalApp\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd466e8b07f4c6220eac16da5127f3ff142e65f0c15c03c7d38f257b02c8585e1\",\"license\":\"MIT\"},\"contracts/MySignalApp.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.18;\\n\\nerror MySignalApp__InsufficientBalance();\\nerror MySignalApp__TransferFailed();\\nerror MySignalApp__InvalidAddress();\\nerror MySignalApp__NotInWhitelist();\\nerror MySignalApp__AlreadyClaimed();\\nerror MySignalApp__NotRegistrar();\\nerror MySignalApp__NotProvider();\\nerror MySignalApp__NotFallback();\\nerror MySignalApp__InvalidFee();\\n\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\ncontract MySignalApp is ERC20 {\\n    uint256 public s_airdropBalance = 1e6 * 10 ** decimals();\\n    uint256 private s_registrarBalance;\\n    uint256 private s_singleDepositBalance;\\n    uint256 private s_fees;\\n    uint256 public immutable i_payPercent;\\n\\n    bytes32 public immutable i_merkleRoot;\\n\\n    address private s_registrar;\\n    address private s_fallbackAddress;\\n\\n    mapping(address => bool) private s_validProvider;\\n    mapping(address => uint256) private s_providerBalance;\\n    mapping(address => uint256) private s_referrerBalance;\\n    mapping(address => bool) private s_claimedAirdrop;\\n\\n    event CompensateProvider(\\n        address indexed provider,\\n        address indexed referrer,\\n        uint256 amount,\\n        uint256 indexed signalId,\\n        string userId\\n    );\\n    event SingleDeposit(string id, string userId, uint256 amount);\\n    event AddressProviderChange(address oldAddress, address newAddress);\\n    event TransferDeposits(address indexed provider, uint256 amount);\\n    event ProviderWithdraw(address indexed provider, uint256 amount);\\n    event RegistrarChange(address oldAddress, address newAddress);\\n    event FallbackChange(address oldAddress, address newAddress);\\n    event FeeChange(uint256 oldFee, uint256 newFee);\\n    event ProviderAdded(address provider);\\n\\n    modifier onlyProvider() {\\n        if (!s_validProvider[msg.sender]) {\\n            revert MySignalApp__NotProvider();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyRegistrar() {\\n        if (msg.sender != s_registrar) revert MySignalApp__NotRegistrar();\\n        _;\\n    }\\n\\n    constructor(\\n        address _registrar,\\n        address _fallbackAddress,\\n        uint256 _fee,\\n        uint256 _payPercent,\\n        bytes32 _merkleRoot\\n    ) ERC20(\\\"Signals Token\\\", \\\"XSN\\\") {\\n        s_registrar = _registrar;\\n        s_validProvider[_registrar] = true;\\n        s_fallbackAddress = _fallbackAddress;\\n        s_fees = _fee;\\n        i_payPercent = _payPercent;\\n        i_merkleRoot = _merkleRoot;\\n\\n        _mint(msg.sender, 499e6 * 10 ** decimals());\\n        _mint(address(this), 1e6 * 10 ** decimals());\\n    }\\n\\n    function payProvider(\\n        address _provider,\\n        address _referrer,\\n        uint256 _signalId,\\n        string calldata _userId\\n    ) external {\\n        if (!s_validProvider[_provider]) revert MySignalApp__NotProvider();\\n        uint256 charge = s_fees;\\n        uint256 fee = (charge * i_payPercent) / 100;\\n\\n        if (_referrer != address(0)) {\\n            uint256 sharedFee = (charge - fee) / 2;\\n            s_providerBalance[_provider] += sharedFee;\\n            s_referrerBalance[_referrer] += sharedFee;\\n            s_registrarBalance += fee;\\n            _transfer(msg.sender, address(this), charge);\\n            emit CompensateProvider(_provider, _referrer, sharedFee, _signalId, _userId);\\n            return;\\n        }\\n\\n        s_providerBalance[_provider] += (charge - fee);\\n        s_registrarBalance += fee;\\n        _transfer(msg.sender, address(this), charge);\\n\\n        emit CompensateProvider(_provider, _referrer, charge - fee, _signalId, _userId);\\n    }\\n\\n    function addProvider(address _provider) external onlyRegistrar {\\n        if (_provider == address(0)) revert MySignalApp__InvalidAddress();\\n        s_validProvider[_provider] = true;\\n        emit ProviderAdded(_provider);\\n    }\\n\\n    function providerChangeAddress(address _newAddr) external onlyProvider {\\n        uint256 oldAddressBalance = s_providerBalance[msg.sender];\\n        s_providerBalance[msg.sender] = 0;\\n\\n        s_validProvider[msg.sender] = false;\\n        s_validProvider[_newAddr] = true;\\n        _transfer(address(this), msg.sender, oldAddressBalance);\\n\\n        emit AddressProviderChange(msg.sender, _newAddr);\\n    }\\n\\n    function providerWithdraw(uint256 _amount) external onlyProvider {\\n        if (_amount > s_providerBalance[msg.sender])\\n            revert MySignalApp__InsufficientBalance();\\n\\n        s_providerBalance[msg.sender] -= _amount;\\n        _transfer(address(this), msg.sender, _amount);\\n\\n        emit ProviderWithdraw(msg.sender, _amount);\\n    }\\n\\n    function registrarWithdraw(uint256 _amount) external onlyRegistrar {\\n        if (_amount > s_registrarBalance) revert MySignalApp__InsufficientBalance();\\n\\n        s_registrarBalance -= _amount;\\n        _transfer(address(this), msg.sender, _amount);\\n    }\\n\\n    function referrerWithdraw() external {\\n        uint256 referrerBalance = s_referrerBalance[msg.sender];\\n        s_referrerBalance[msg.sender] = 0;\\n        _transfer(address(this), msg.sender, referrerBalance);\\n    }\\n\\n    function fallbackWithdraw(uint256 _amount) external {\\n        if (msg.sender != s_fallbackAddress) revert MySignalApp__NotFallback();\\n        if (_amount > address(this).balance) revert MySignalApp__InsufficientBalance();\\n\\n        (bool sent, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        if (!sent) revert MySignalApp__TransferFailed();\\n    }\\n\\n    function changeFee(uint256 _fee) external onlyRegistrar {\\n        uint256 oldFee = s_fees;\\n        s_fees = _fee;\\n        emit FeeChange(oldFee, _fee);\\n    }\\n\\n    function changeRegistrar(address _addr) external onlyRegistrar {\\n        if (_addr == address(0)) revert MySignalApp__InvalidAddress();\\n        address oldAddress = s_registrar;\\n        s_registrar = _addr;\\n        emit RegistrarChange(oldAddress, _addr);\\n    }\\n\\n    function changeFallback(address _addr) external {\\n        if (msg.sender != s_fallbackAddress) revert MySignalApp__NotFallback();\\n        if (_addr == address(0)) revert MySignalApp__InvalidAddress();\\n        address oldAddress = s_fallbackAddress;\\n        s_fallbackAddress = _addr;\\n        emit FallbackChange(oldAddress, _addr);\\n    }\\n\\n    function checkInWhitelist(\\n        bytes32[] calldata _proof,\\n        uint64 _amount\\n    ) public view returns (bool) {\\n        bytes32 leaf = keccak256(abi.encode(msg.sender, _amount));\\n        bool verified = MerkleProof.verify(_proof, i_merkleRoot, leaf);\\n        return verified;\\n    }\\n\\n    function claimAirdrop(bytes32[] calldata _proof, uint64 _amount) external {\\n        if (s_claimedAirdrop[msg.sender]) revert MySignalApp__AlreadyClaimed();\\n        if (!checkInWhitelist(_proof, _amount)) revert MySignalApp__NotInWhitelist();\\n        s_claimedAirdrop[msg.sender] = true;\\n        s_airdropBalance -= _amount;\\n        _transfer(address(this), msg.sender, _amount);\\n    }\\n\\n    function getFee() external view returns (uint256) {\\n        return s_fees;\\n    }\\n\\n    function getRegistrarBalance() external view returns (uint256) {\\n        return s_registrarBalance;\\n    }\\n\\n    function getFallbacks() external view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    function getProviderBalance(address _addr) external view returns (uint256) {\\n        return s_providerBalance[_addr];\\n    }\\n\\n    function getReferrerBalance(address _addr) external view returns (uint256) {\\n        return s_referrerBalance[_addr];\\n    }\\n\\n    function isValidProvider(address _addr) external view returns (bool) {\\n        return s_validProvider[_addr];\\n    }\\n}\\n\",\"keccak256\":\"0x10b2b0d3ed88eac615f62f0d9229f30ae718f9f933e9ba5346e6fc9f97c213fa\",\"license\":\"SEE LICENSE IN LICENSE\"}},\"version\":1}",
  "bytecode": "0x60c0604052620000126012600a62000350565b6200002190620f424062000368565b6005553480156200003157600080fd5b506040516200230b3803806200230b83398101604081905262000054916200039f565b6040518060400160405280600d81526020016c29b4b3b730b639902a37b5b2b760991b815250604051806040016040528060038152602001622c29a760e91b8152508160039081620000a7919062000496565b506004620000b6828262000496565b5050600980546001600160a01b03199081166001600160a01b038981169182179093556000908152600b60205260409020805460ff19166001179055600a8054909116918716919091179055506008839055608082905260a0819052620001433362000120601290565b6200012d90600a62000350565b6200013d90631dbe22c062000368565b62000170565b6200016530620001566012600a62000350565b6200013d90620f424062000368565b505050505062000578565b6001600160a01b038216620001cb5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b8060026000828254620001df919062000562565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b505050565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115620002925781600019048211156200027657620002766200023b565b808516156200028457918102915b93841c939080029062000256565b509250929050565b600082620002ab575060016200034a565b81620002ba575060006200034a565b8160018114620002d35760028114620002de57620002fe565b60019150506200034a565b60ff841115620002f257620002f26200023b565b50506001821b6200034a565b5060208310610133831016604e8410600b841016171562000323575081810a6200034a565b6200032f838362000251565b80600019048211156200034657620003466200023b565b0290505b92915050565b60006200036160ff8416836200029a565b9392505050565b80820281158282048414176200034a576200034a6200023b565b80516001600160a01b03811681146200039a57600080fd5b919050565b600080600080600060a08688031215620003b857600080fd5b620003c38662000382565b9450620003d36020870162000382565b6040870151606088015160809098015196999198509695945092505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200041d57607f821691505b6020821081036200043e57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200023657600081815260208120601f850160051c810160208610156200046d5750805b601f850160051c820191505b818110156200048e5782815560010162000479565b505050505050565b81516001600160401b03811115620004b257620004b2620003f2565b620004ca81620004c3845462000408565b8462000444565b602080601f831160018114620005025760008415620004e95750858301515b600019600386901b1c1916600185901b1785556200048e565b600085815260208120601f198616915b82811015620005335788860151825594840194600190910190840162000512565b5085821015620005525787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b808201808211156200034a576200034a6200023b565b60805160a051611d5f620005ac60003960008181610491015261132b01526000818161036901526109770152611d5f6000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c806370a082311161010f578063a457c2d7116100a2578063c73b959b11610071578063c73b959b1461048c578063ced72f87146104b3578063dd62ed3e146104bb578063e10d3be21461050157600080fd5b8063a457c2d7146103f7578063a9059cbb1461040a578063abc3bc921461041d578063b2bbefdb1461045357600080fd5b80638a3def65116100de5780638a3def65146103c157806395d89b41146103d45780639b2f9842146103dc5780639e2176f9146103e457600080fd5b806370a082311461031b57806376b58810146103515780637d91eef214610364578063832eea0c1461038b57600080fd5b80632b96942b11610187578063395093511161015657806339509351146102cf57806346e2577a146102e2578063576cf667146102f55780636a1db1bf1461030857600080fd5b80632b96942b146102925780632e41b590146102a5578063313ce567146102b857806333fd7b07146102c757600080fd5b80631d7f80ae116101c35780631d7f80ae1461025d57806323b872dd1461027057806325d638e51461028357806325fe7b7f1461028957600080fd5b806306fdde03146101f5578063095ea7b31461021357806318160ddd146102365780631acf21ff14610248575b600080fd5b6101fd610514565b60405161020a91906118ea565b60405180910390f35b61022661022136600461197f565b6105a6565b604051901515815260200161020a565b6002545b60405190815260200161020a565b61025b6102563660046119a9565b6105c0565b005b61025b61026b366004611a36565b6106bf565b61022661027e366004611a51565b6107d7565b4761023a565b61023a60055481565b61025b6102a0366004611a8d565b6107fb565b61025b6102b3366004611aa6565b61090c565b6040516012815260200161020a565b61025b610bbf565b6102266102dd36600461197f565b610be3565b61025b6102f0366004611a36565b610c2f565b61025b610303366004611a36565b610d52565b61025b610316366004611a8d565b610e6f565b61023a610329366004611a36565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b61025b61035f366004611a36565b610efe565b61023a7f000000000000000000000000000000000000000000000000000000000000000081565b61023a610399366004611a36565b73ffffffffffffffffffffffffffffffffffffffff166000908152600c602052604090205490565b61025b6103cf366004611a8d565b61101b565b6101fd6110cb565b60065461023a565b61025b6103f2366004611a8d565b6110da565b61022661040536600461197f565b6111d4565b61022661041836600461197f565b6112aa565b61023a61042b366004611a36565b73ffffffffffffffffffffffffffffffffffffffff166000908152600d602052604090205490565b610226610461366004611a36565b73ffffffffffffffffffffffffffffffffffffffff166000908152600b602052604090205460ff1690565b61023a7f000000000000000000000000000000000000000000000000000000000000000081565b60085461023a565b61023a6104c9366004611b41565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b61022661050f3660046119a9565b6112b8565b60606003805461052390611b74565b80601f016020809104026020016040519081016040528092919081815260200182805461054f90611b74565b801561059c5780601f106105715761010080835404028352916020019161059c565b820191906000526020600020905b81548152906001019060200180831161057f57829003601f168201915b5050505050905090565b6000336105b4818585611360565b60019150505b92915050565b336000908152600e602052604090205460ff161561060a576040517f68ac8e6900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6106158383836112b8565b61064b576040517f1845a60f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336000908152600e6020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556005805467ffffffffffffffff8416929061069f908490611bf6565b909155506106ba9050303367ffffffffffffffff8416611513565b505050565b336000908152600b602052604090205460ff16610708576040517fa41eb8c200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336000818152600c60209081526040808320805490849055600b90925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0090811690915573ffffffffffffffffffffffffffffffffffffffff86168452922080549092166001179091559061078490309083611513565b6040805133815273ffffffffffffffffffffffffffffffffffffffff841660208201527f5bbda34f4283e006dc680407c75f3f17c43d2869c203923c1331d3800398a71b91015b60405180910390a15050565b6000336107e5858285611784565b6107f0858585611513565b506001949350505050565b600a5473ffffffffffffffffffffffffffffffffffffffff16331461084c576040517f824f28fa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b47811115610886576040517f882b286b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604051600090339047908381818185875af1925050503d80600081146108c8576040519150601f19603f3d011682016040523d82523d6000602084013e6108cd565b606091505b5050905080610908576040517f1f2f4bab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600b602052604090205460ff1661096b576040517fa41eb8c200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6008546000606461099c7f000000000000000000000000000000000000000000000000000000000000000084611c09565b6109a69190611c20565b905073ffffffffffffffffffffffffffffffffffffffff861615610aec57600060026109d28385611bf6565b6109dc9190611c20565b73ffffffffffffffffffffffffffffffffffffffff89166000908152600c6020526040812080549293508392909190610a16908490611c5b565b909155505073ffffffffffffffffffffffffffffffffffffffff87166000908152600d602052604081208054839290610a50908490611c5b565b925050819055508160066000828254610a699190611c5b565b90915550610a7a9050333085611513565b858773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff167f8796fed90e2848cb224d49106d22a29aa40c22c1a2b21acd42d9bce9423713e2848989604051610adc93929190611c6e565b60405180910390a4505050610bb8565b610af68183611bf6565b73ffffffffffffffffffffffffffffffffffffffff88166000908152600c602052604081208054909190610b2b908490611c5b565b925050819055508060066000828254610b449190611c5b565b90915550610b559050333084611513565b8473ffffffffffffffffffffffffffffffffffffffff8088169089167f8796fed90e2848cb224d49106d22a29aa40c22c1a2b21acd42d9bce9423713e2610b9c8587611bf6565b8888604051610bad93929190611c6e565b60405180910390a450505b5050505050565b336000818152600d60205260408120805491905590610be090309083611513565b50565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff871684529091528120549091906105b49082908690610c2a908790611c5b565b611360565b60095473ffffffffffffffffffffffffffffffffffffffff163314610c80576040517fece6d48800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8116610ccd576040517f247e2d4a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff81166000818152600b602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905590519182527fae9c2c6481964847714ce58f65a7f6dcc41d0d8394449bacdf161b5920c4744a910160405180910390a150565b600a5473ffffffffffffffffffffffffffffffffffffffff163314610da3576040517f824f28fa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8116610df0576040517f247e2d4a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600a805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff000000000000000000000000000000000000000083168117909355604080519190921680825260208201939093527f9cfd98ce2b0572a77cf9d71bacef7955c853a989204db1ce37fbee74f280d35b91016107cb565b60095473ffffffffffffffffffffffffffffffffffffffff163314610ec0576040517fece6d48800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600880549082905560408051828152602081018490527fa995ac7c2dc5fdc05b41983e69d4d9fbd224a8528bc7d86eabfd533cd3ca449791016107cb565b60095473ffffffffffffffffffffffffffffffffffffffff163314610f4f576040517fece6d48800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8116610f9c576040517f247e2d4a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6009805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff000000000000000000000000000000000000000083168117909355604080519190921680825260208201939093527faa91ef4e7d0a22f1b92d0eb50b6e60b1034e11c61318a81e150143d5715ebb3991016107cb565b60095473ffffffffffffffffffffffffffffffffffffffff16331461106c576040517fece6d48800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6006548111156110a8576040517f882b286b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600660008282546110ba9190611bf6565b90915550610be09050303383611513565b60606004805461052390611b74565b336000908152600b602052604090205460ff16611123576040517fa41eb8c200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336000908152600c602052604090205481111561116c576040517f882b286b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336000908152600c60205260408120805483929061118b908490611bf6565b9091555061119c9050303383611513565b60405181815233907f12e802b6ed6e970b958406df898001b6336cab376c17f335ea72d122ecdf3c2d9060200160405180910390a250565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff871684529091528120549091908381101561129d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6107f08286868403611360565b6000336105b4818585611513565b6040805133602082015267ffffffffffffffff831691810191909152600090819060600160405160208183030381529060405280519060200120905060006113568686808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152507f000000000000000000000000000000000000000000000000000000000000000092508691506118559050565b9695505050505050565b73ffffffffffffffffffffffffffffffffffffffff8316611402576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401611294565b73ffffffffffffffffffffffffffffffffffffffff82166114a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401611294565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff83166115b6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401611294565b73ffffffffffffffffffffffffffffffffffffffff8216611659576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401611294565b73ffffffffffffffffffffffffffffffffffffffff83166000908152602081905260409020548181101561170f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401611294565b73ffffffffffffffffffffffffffffffffffffffff848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35b50505050565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152600160209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461177e5781811015611848576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401611294565b61177e8484848403611360565b600082611862858461186b565b14949350505050565b600081815b84518110156118b05761189c8286838151811061188f5761188f611cc2565b60200260200101516118b8565b9150806118a881611cf1565b915050611870565b509392505050565b60008183106118d45760008281526020849052604090206118e3565b60008381526020839052604090205b9392505050565b600060208083528351808285015260005b81811015611917578581018301518582016040015282016118fb565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461197a57600080fd5b919050565b6000806040838503121561199257600080fd5b61199b83611956565b946020939093013593505050565b6000806000604084860312156119be57600080fd5b833567ffffffffffffffff808211156119d657600080fd5b818601915086601f8301126119ea57600080fd5b8135818111156119f957600080fd5b8760208260051b8501011115611a0e57600080fd5b60209283019550935090850135908082168214611a2a57600080fd5b50809150509250925092565b600060208284031215611a4857600080fd5b6118e382611956565b600080600060608486031215611a6657600080fd5b611a6f84611956565b9250611a7d60208501611956565b9150604084013590509250925092565b600060208284031215611a9f57600080fd5b5035919050565b600080600080600060808688031215611abe57600080fd5b611ac786611956565b9450611ad560208701611956565b935060408601359250606086013567ffffffffffffffff80821115611af957600080fd5b818801915088601f830112611b0d57600080fd5b813581811115611b1c57600080fd5b896020828501011115611b2e57600080fd5b9699959850939650602001949392505050565b60008060408385031215611b5457600080fd5b611b5d83611956565b9150611b6b60208401611956565b90509250929050565b600181811c90821680611b8857607f821691505b602082108103611bc1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b818103818111156105ba576105ba611bc7565b80820281158282048414176105ba576105ba611bc7565b600082611c56577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b808201808211156105ba576105ba611bc7565b83815260406020820152816040820152818360608301376000818301606090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016010192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611d2257611d22611bc7565b506001019056fea2646970667358221220ca9a14540e56410ed817f0fa7b60b844a50cf70e6a8379b6da793b699e096d8264736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101f05760003560e01c806370a082311161010f578063a457c2d7116100a2578063c73b959b11610071578063c73b959b1461048c578063ced72f87146104b3578063dd62ed3e146104bb578063e10d3be21461050157600080fd5b8063a457c2d7146103f7578063a9059cbb1461040a578063abc3bc921461041d578063b2bbefdb1461045357600080fd5b80638a3def65116100de5780638a3def65146103c157806395d89b41146103d45780639b2f9842146103dc5780639e2176f9146103e457600080fd5b806370a082311461031b57806376b58810146103515780637d91eef214610364578063832eea0c1461038b57600080fd5b80632b96942b11610187578063395093511161015657806339509351146102cf57806346e2577a146102e2578063576cf667146102f55780636a1db1bf1461030857600080fd5b80632b96942b146102925780632e41b590146102a5578063313ce567146102b857806333fd7b07146102c757600080fd5b80631d7f80ae116101c35780631d7f80ae1461025d57806323b872dd1461027057806325d638e51461028357806325fe7b7f1461028957600080fd5b806306fdde03146101f5578063095ea7b31461021357806318160ddd146102365780631acf21ff14610248575b600080fd5b6101fd610514565b60405161020a91906118ea565b60405180910390f35b61022661022136600461197f565b6105a6565b604051901515815260200161020a565b6002545b60405190815260200161020a565b61025b6102563660046119a9565b6105c0565b005b61025b61026b366004611a36565b6106bf565b61022661027e366004611a51565b6107d7565b4761023a565b61023a60055481565b61025b6102a0366004611a8d565b6107fb565b61025b6102b3366004611aa6565b61090c565b6040516012815260200161020a565b61025b610bbf565b6102266102dd36600461197f565b610be3565b61025b6102f0366004611a36565b610c2f565b61025b610303366004611a36565b610d52565b61025b610316366004611a8d565b610e6f565b61023a610329366004611a36565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b61025b61035f366004611a36565b610efe565b61023a7f000000000000000000000000000000000000000000000000000000000000000081565b61023a610399366004611a36565b73ffffffffffffffffffffffffffffffffffffffff166000908152600c602052604090205490565b61025b6103cf366004611a8d565b61101b565b6101fd6110cb565b60065461023a565b61025b6103f2366004611a8d565b6110da565b61022661040536600461197f565b6111d4565b61022661041836600461197f565b6112aa565b61023a61042b366004611a36565b73ffffffffffffffffffffffffffffffffffffffff166000908152600d602052604090205490565b610226610461366004611a36565b73ffffffffffffffffffffffffffffffffffffffff166000908152600b602052604090205460ff1690565b61023a7f000000000000000000000000000000000000000000000000000000000000000081565b60085461023a565b61023a6104c9366004611b41565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b61022661050f3660046119a9565b6112b8565b60606003805461052390611b74565b80601f016020809104026020016040519081016040528092919081815260200182805461054f90611b74565b801561059c5780601f106105715761010080835404028352916020019161059c565b820191906000526020600020905b81548152906001019060200180831161057f57829003601f168201915b5050505050905090565b6000336105b4818585611360565b60019150505b92915050565b336000908152600e602052604090205460ff161561060a576040517f68ac8e6900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6106158383836112b8565b61064b576040517f1845a60f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336000908152600e6020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556005805467ffffffffffffffff8416929061069f908490611bf6565b909155506106ba9050303367ffffffffffffffff8416611513565b505050565b336000908152600b602052604090205460ff16610708576040517fa41eb8c200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336000818152600c60209081526040808320805490849055600b90925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0090811690915573ffffffffffffffffffffffffffffffffffffffff86168452922080549092166001179091559061078490309083611513565b6040805133815273ffffffffffffffffffffffffffffffffffffffff841660208201527f5bbda34f4283e006dc680407c75f3f17c43d2869c203923c1331d3800398a71b91015b60405180910390a15050565b6000336107e5858285611784565b6107f0858585611513565b506001949350505050565b600a5473ffffffffffffffffffffffffffffffffffffffff16331461084c576040517f824f28fa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b47811115610886576040517f882b286b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604051600090339047908381818185875af1925050503d80600081146108c8576040519150601f19603f3d011682016040523d82523d6000602084013e6108cd565b606091505b5050905080610908576040517f1f2f4bab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600b602052604090205460ff1661096b576040517fa41eb8c200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6008546000606461099c7f000000000000000000000000000000000000000000000000000000000000000084611c09565b6109a69190611c20565b905073ffffffffffffffffffffffffffffffffffffffff861615610aec57600060026109d28385611bf6565b6109dc9190611c20565b73ffffffffffffffffffffffffffffffffffffffff89166000908152600c6020526040812080549293508392909190610a16908490611c5b565b909155505073ffffffffffffffffffffffffffffffffffffffff87166000908152600d602052604081208054839290610a50908490611c5b565b925050819055508160066000828254610a699190611c5b565b90915550610a7a9050333085611513565b858773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff167f8796fed90e2848cb224d49106d22a29aa40c22c1a2b21acd42d9bce9423713e2848989604051610adc93929190611c6e565b60405180910390a4505050610bb8565b610af68183611bf6565b73ffffffffffffffffffffffffffffffffffffffff88166000908152600c602052604081208054909190610b2b908490611c5b565b925050819055508060066000828254610b449190611c5b565b90915550610b559050333084611513565b8473ffffffffffffffffffffffffffffffffffffffff8088169089167f8796fed90e2848cb224d49106d22a29aa40c22c1a2b21acd42d9bce9423713e2610b9c8587611bf6565b8888604051610bad93929190611c6e565b60405180910390a450505b5050505050565b336000818152600d60205260408120805491905590610be090309083611513565b50565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff871684529091528120549091906105b49082908690610c2a908790611c5b565b611360565b60095473ffffffffffffffffffffffffffffffffffffffff163314610c80576040517fece6d48800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8116610ccd576040517f247e2d4a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff81166000818152600b602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905590519182527fae9c2c6481964847714ce58f65a7f6dcc41d0d8394449bacdf161b5920c4744a910160405180910390a150565b600a5473ffffffffffffffffffffffffffffffffffffffff163314610da3576040517f824f28fa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8116610df0576040517f247e2d4a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600a805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff000000000000000000000000000000000000000083168117909355604080519190921680825260208201939093527f9cfd98ce2b0572a77cf9d71bacef7955c853a989204db1ce37fbee74f280d35b91016107cb565b60095473ffffffffffffffffffffffffffffffffffffffff163314610ec0576040517fece6d48800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600880549082905560408051828152602081018490527fa995ac7c2dc5fdc05b41983e69d4d9fbd224a8528bc7d86eabfd533cd3ca449791016107cb565b60095473ffffffffffffffffffffffffffffffffffffffff163314610f4f576040517fece6d48800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8116610f9c576040517f247e2d4a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6009805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff000000000000000000000000000000000000000083168117909355604080519190921680825260208201939093527faa91ef4e7d0a22f1b92d0eb50b6e60b1034e11c61318a81e150143d5715ebb3991016107cb565b60095473ffffffffffffffffffffffffffffffffffffffff16331461106c576040517fece6d48800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6006548111156110a8576040517f882b286b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600660008282546110ba9190611bf6565b90915550610be09050303383611513565b60606004805461052390611b74565b336000908152600b602052604090205460ff16611123576040517fa41eb8c200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336000908152600c602052604090205481111561116c576040517f882b286b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336000908152600c60205260408120805483929061118b908490611bf6565b9091555061119c9050303383611513565b60405181815233907f12e802b6ed6e970b958406df898001b6336cab376c17f335ea72d122ecdf3c2d9060200160405180910390a250565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff871684529091528120549091908381101561129d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6107f08286868403611360565b6000336105b4818585611513565b6040805133602082015267ffffffffffffffff831691810191909152600090819060600160405160208183030381529060405280519060200120905060006113568686808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152507f000000000000000000000000000000000000000000000000000000000000000092508691506118559050565b9695505050505050565b73ffffffffffffffffffffffffffffffffffffffff8316611402576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401611294565b73ffffffffffffffffffffffffffffffffffffffff82166114a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401611294565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff83166115b6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401611294565b73ffffffffffffffffffffffffffffffffffffffff8216611659576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401611294565b73ffffffffffffffffffffffffffffffffffffffff83166000908152602081905260409020548181101561170f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401611294565b73ffffffffffffffffffffffffffffffffffffffff848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35b50505050565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152600160209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461177e5781811015611848576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401611294565b61177e8484848403611360565b600082611862858461186b565b14949350505050565b600081815b84518110156118b05761189c8286838151811061188f5761188f611cc2565b60200260200101516118b8565b9150806118a881611cf1565b915050611870565b509392505050565b60008183106118d45760008281526020849052604090206118e3565b60008381526020839052604090205b9392505050565b600060208083528351808285015260005b81811015611917578581018301518582016040015282016118fb565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461197a57600080fd5b919050565b6000806040838503121561199257600080fd5b61199b83611956565b946020939093013593505050565b6000806000604084860312156119be57600080fd5b833567ffffffffffffffff808211156119d657600080fd5b818601915086601f8301126119ea57600080fd5b8135818111156119f957600080fd5b8760208260051b8501011115611a0e57600080fd5b60209283019550935090850135908082168214611a2a57600080fd5b50809150509250925092565b600060208284031215611a4857600080fd5b6118e382611956565b600080600060608486031215611a6657600080fd5b611a6f84611956565b9250611a7d60208501611956565b9150604084013590509250925092565b600060208284031215611a9f57600080fd5b5035919050565b600080600080600060808688031215611abe57600080fd5b611ac786611956565b9450611ad560208701611956565b935060408601359250606086013567ffffffffffffffff80821115611af957600080fd5b818801915088601f830112611b0d57600080fd5b813581811115611b1c57600080fd5b896020828501011115611b2e57600080fd5b9699959850939650602001949392505050565b60008060408385031215611b5457600080fd5b611b5d83611956565b9150611b6b60208401611956565b90509250929050565b600181811c90821680611b8857607f821691505b602082108103611bc1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b818103818111156105ba576105ba611bc7565b80820281158282048414176105ba576105ba611bc7565b600082611c56577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b808201808211156105ba576105ba611bc7565b83815260406020820152816040820152818360608301376000818301606090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016010192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611d2257611d22611bc7565b506001019056fea2646970667358221220ca9a14540e56410ed817f0fa7b60b844a50cf70e6a8379b6da793b699e096d8264736f6c63430008120033",
  "devdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      }
    },
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15,
        "contract": "contracts/MySignalApp.sol:MySignalApp",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 21,
        "contract": "contracts/MySignalApp.sol:MySignalApp",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 23,
        "contract": "contracts/MySignalApp.sol:MySignalApp",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 25,
        "contract": "contracts/MySignalApp.sol:MySignalApp",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 27,
        "contract": "contracts/MySignalApp.sol:MySignalApp",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 1247,
        "contract": "contracts/MySignalApp.sol:MySignalApp",
        "label": "s_airdropBalance",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1249,
        "contract": "contracts/MySignalApp.sol:MySignalApp",
        "label": "s_registrarBalance",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1251,
        "contract": "contracts/MySignalApp.sol:MySignalApp",
        "label": "s_singleDepositBalance",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1253,
        "contract": "contracts/MySignalApp.sol:MySignalApp",
        "label": "s_fees",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1259,
        "contract": "contracts/MySignalApp.sol:MySignalApp",
        "label": "s_registrar",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 1261,
        "contract": "contracts/MySignalApp.sol:MySignalApp",
        "label": "s_fallbackAddress",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 1265,
        "contract": "contracts/MySignalApp.sol:MySignalApp",
        "label": "s_validProvider",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1269,
        "contract": "contracts/MySignalApp.sol:MySignalApp",
        "label": "s_providerBalance",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1273,
        "contract": "contracts/MySignalApp.sol:MySignalApp",
        "label": "s_referrerBalance",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1277,
        "contract": "contracts/MySignalApp.sol:MySignalApp",
        "label": "s_claimedAirdrop",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}