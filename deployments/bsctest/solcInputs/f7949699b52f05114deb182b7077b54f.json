{
  "language": "Solidity",
  "sources": {
    "contracts/MySignalApp.sol": {
      "content": "// SPDX-License-Identifier: SEE LICENSE IN LICENSE\npragma solidity 0.8.18;\n\nerror MySignalApp__InvalidProviderOrFee();\nerror MySignalApp__InsufficientBalance();\nerror MySignalApp__TransferFailed();\nerror MySignalApp__InvalidAddress();\nerror MySignalApp__NotRegistrar();\nerror MySignalApp__NotProvider();\nerror MySignalApp__NotFallback();\nerror MySignalApp__InvalidFee();\n\ncontract MySignalApp {\n    uint256 private s_registrarBalance;\n    uint256 private s_singleDepositBalance;\n    uint256 private s_fallbacks;\n    uint256 private s_fees;\n    uint256 public immutable i_payPercent;\n\n    address private s_registrar;\n    address private s_fallbackAddress;\n\n    mapping(address => bool) private s_validProvider;\n    mapping(address => uint256) private s_providerBalance;\n\n    event CompensateProvider(\n        address indexed provider,\n        uint256 amount,\n        uint256 indexed signalId,\n        string indexed userId\n    );\n    event SingleDeposit(string indexed id, string indexed userId, uint256 amount);\n    event AddressProviderChange(address oldAddress, address newAddress);\n    event TransferDeposits(address indexed provider, uint256 amount);\n    event ProviderWithdraw(address indexed provider, uint256 amount);\n    event RegistrarChange(address oldAddress, address newAddress);\n    event FallbackChange(address oldAddress, address newAddress);\n    event FeeChange(uint256 oldFee, uint256 newFee);\n    event ProviderAdded(address provider);\n\n    modifier onlyProvider() {\n        if (!s_validProvider[msg.sender]) {\n            revert MySignalApp__NotProvider();\n        }\n        _;\n    }\n\n    modifier onlyRegistrar() {\n        if (msg.sender != s_registrar) revert MySignalApp__NotRegistrar();\n        _;\n    }\n\n    constructor(\n        address _registrar,\n        address _fallbackAddress,\n        uint256 _fee,\n        uint256 _payPercent\n    ) {\n        s_registrar = _registrar;\n        s_fallbackAddress = _fallbackAddress;\n        s_fees = _fee;\n        i_payPercent = _payPercent;\n    }\n\n    fallback() external payable {\n        s_fallbacks += msg.value;\n    }\n\n    receive() external payable {\n        s_fallbacks += msg.value;\n    }\n\n    function payProvider(\n        address _provider,\n        uint256 _signalId,\n        string calldata _userId\n    ) external payable {\n        if ((msg.value == s_fees) && s_validProvider[_provider]) {\n            uint256 fee = (msg.value * i_payPercent) / 100;\n            s_providerBalance[_provider] += (msg.value - fee);\n            s_registrarBalance += fee;\n            emit CompensateProvider(_provider, msg.value - fee, _signalId, _userId);\n        } else {\n            revert MySignalApp__InvalidProviderOrFee();\n        }\n    }\n\n    function singleDeposit(string calldata _id, string calldata _userId) external payable {\n        if (msg.value == s_fees) {\n            uint256 fee = (msg.value * i_payPercent) / 100;\n            s_singleDepositBalance += (msg.value - fee);\n            s_registrarBalance += fee;\n            emit SingleDeposit(_id, _userId, msg.value - fee);\n        } else {\n            revert MySignalApp__InvalidFee();\n        }\n    }\n\n    function addProvider(address _provider) external onlyRegistrar {\n        s_validProvider[_provider] = true;\n        emit ProviderAdded(_provider);\n    }\n\n    function providerChangeAddress(address _newAddr) external onlyProvider {\n        uint256 oldAddressBalance = s_providerBalance[msg.sender];\n        s_providerBalance[msg.sender] = 0;\n        s_validProvider[msg.sender] = false;\n        s_validProvider[_newAddr] = true;\n        (bool sent, ) = payable(msg.sender).call{value: oldAddressBalance}(\"\");\n        if (!sent) revert MySignalApp__TransferFailed();\n        emit AddressProviderChange(msg.sender, _newAddr);\n    }\n\n    function providerWithdraw(uint256 _amount) external onlyProvider {\n        if (_amount > s_providerBalance[msg.sender])\n            revert MySignalApp__InsufficientBalance();\n        s_providerBalance[msg.sender] -= _amount;\n        (bool sent, ) = payable(msg.sender).call{value: _amount}(\"\");\n        if (!sent) revert MySignalApp__TransferFailed();\n        emit ProviderWithdraw(msg.sender, _amount);\n    }\n\n    function registrarWithdraw(uint256 _amount) external onlyRegistrar {\n        if (_amount > s_registrarBalance) revert MySignalApp__InsufficientBalance();\n\n        s_registrarBalance -= _amount;\n        (bool sent, ) = payable(msg.sender).call{value: _amount}(\"\");\n        if (!sent) revert MySignalApp__TransferFailed();\n    }\n\n    function transferDeposit(address _provider, uint256 _amount) external onlyRegistrar {\n        if (!s_validProvider[_provider]) revert MySignalApp__NotProvider();\n        if (_amount > s_singleDepositBalance) revert MySignalApp__InsufficientBalance();\n\n        s_singleDepositBalance -= _amount;\n        (bool sent, ) = payable(_provider).call{value: _amount}(\"\");\n        if (!sent) revert MySignalApp__TransferFailed();\n        emit TransferDeposits(_provider, _amount);\n    }\n\n    function fallbackWithdraw(uint256 _amount) external {\n        if (msg.sender != s_fallbackAddress) revert MySignalApp__NotFallback();\n        if (_amount > s_fallbacks) revert MySignalApp__InsufficientBalance();\n\n        s_fallbacks -= _amount;\n        (bool sent, ) = payable(msg.sender).call{value: _amount}(\"\");\n        if (!sent) revert MySignalApp__TransferFailed();\n    }\n\n    function changeFee(uint256 _fee) external onlyRegistrar {\n        uint256 oldFee = s_fees;\n        s_fees = _fee;\n        emit FeeChange(oldFee, _fee);\n    }\n\n    function changeRegistrar(address _addr) external onlyRegistrar {\n        if (_addr == address(0)) revert MySignalApp__InvalidAddress();\n        address oldAddress = s_registrar;\n        s_registrar = _addr;\n        emit RegistrarChange(oldAddress, _addr);\n    }\n\n    function changeFallback(address _addr) external {\n        if (msg.sender != s_fallbackAddress) revert MySignalApp__NotFallback();\n        if (_addr == address(0)) revert MySignalApp__InvalidAddress();\n        address oldAddress = s_fallbackAddress;\n        s_fallbackAddress = _addr;\n        emit FallbackChange(oldAddress, _addr);\n    }\n\n    function getFee() external view returns (uint256) {\n        return s_fees;\n    }\n\n    function getRegistrarBalance() external view returns (uint256) {\n        return s_registrarBalance;\n    }\n\n    function getFallbacks() external view returns (uint256) {\n        return s_fallbacks;\n    }\n\n    function getProviderBalance(address _addr) external view returns (uint256) {\n        return s_providerBalance[_addr];\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 20000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}