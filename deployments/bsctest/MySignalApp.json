{
  "address": "0x641eC2EF8d76778b768Ae2725b0D061ecBe87cdf",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registrar",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fallbackAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_payPercent",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_airdropBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "MySignalApp__AllocationExceedsTokensLeft",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MySignalApp__AlreadyClaimed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MySignalApp__InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MySignalApp__InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MySignalApp__InvalidPresalePurchaseAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MySignalApp__NotFallback",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MySignalApp__NotInWhitelist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MySignalApp__NotInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MySignalApp__NotProvider",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MySignalApp__NotRegistrar",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MySignalApp__PresaleMustEnd",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MySignalApp__TransferFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "AddressProviderChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AirdropClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "signalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "userId",
          "type": "string"
        }
      ],
      "name": "CompensateProvider",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "FallbackChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "FeeChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensReceived",
          "type": "uint256"
        }
      ],
      "name": "PreSaleTokensPurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "ProviderAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ProviderWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "RegistrarChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TransferDeposits",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        }
      ],
      "name": "addProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minBuy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxBuy",
          "type": "uint256"
        }
      ],
      "name": "changeBuyLimits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "changeFallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "changeFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "changeRegistrar",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "checkInWhitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "claimAirdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endPreSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "fallbackWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFallbacks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPresaleDetails",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "saleCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountRaised",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountWithdrawable",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokensLeft",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokensSold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokensPerBnb",
              "type": "uint256"
            }
          ],
          "internalType": "struct MySignalApp.presaleDetails",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "getProviderBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "getReferrerBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRegistrarBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_merkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_payPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "preSaleAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokensPerBnb",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "isValidProvider",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_referrer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_signalId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_userId",
          "type": "string"
        }
      ],
      "name": "payProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAddr",
          "type": "address"
        }
      ],
      "name": "providerChangeAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "providerWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referrerWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "registrarWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_airdropBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_isPresale",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_maxBuy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_minBuy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_tokensPerBnb",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawPreSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xc06e302e8c74ce9c758570ed7c4461fb5a1f5823a2486b39ec3157bd5cc101b8",
  "receipt": {
    "to": null,
    "from": "0x2D3780568E72EE39137b4D5b49f585fe559410Dc",
    "contractAddress": "0x641eC2EF8d76778b768Ae2725b0D061ecBe87cdf",
    "transactionIndex": 3,
    "gasUsed": "2634783",
    "logsBloom": "0x
    "blockHash": "0xd1e1d757aa4df752e38d4d98de253dfc4be66589aff5c6be3a79894bbfa52222",
    "transactionHash": "0xc06e302e8c74ce9c758570ed7c4461fb5a1f5823a2486b39ec3157bd5cc101b8",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 44365450,
        "transactionHash": "0xc06e302e8c74ce9c758570ed7c4461fb5a1f5823a2486b39ec3157bd5cc101b8",
        "address": "0x641eC2EF8d76778b768Ae2725b0D061ecBe87cdf",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000641ec2ef8d76778b768ae2725b0d061ecbe87cdf"
        ],
        "data": "0x000000000000000000000000000000000000000000055b2e1bc7ac976ddc0000",
        "logIndex": 4,
        "blockHash": "0xd1e1d757aa4df752e38d4d98de253dfc4be66589aff5c6be3a79894bbfa52222"
      }
    ],
    "blockNumber": 44365450,
    "cumulativeGasUsed": "2841631",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2D3780568E72EE39137b4D5b49f585fe559410Dc",
    "0x2D3780568E72EE39137b4D5b49f585fe559410Dc",
    "100000000000000000",
    60,
    "0xb2d5df9614337eb7878b053e8976841b4312f8a40bf101799a3fceb05b8fbb6f",
    "6475215000000000000000000"
  ],
  "numDeployments": 3,
  "solcInputHash": "c946c9ea0c4965097ccb8bd42478695a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registrar\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fallbackAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payPercent\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_airdropBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"MySignalApp__AllocationExceedsTokensLeft\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MySignalApp__AlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MySignalApp__InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MySignalApp__InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MySignalApp__InvalidPresalePurchaseAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MySignalApp__NotFallback\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MySignalApp__NotInWhitelist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MySignalApp__NotInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MySignalApp__NotProvider\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MySignalApp__NotRegistrar\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MySignalApp__PresaleMustEnd\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MySignalApp__TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"AddressProviderChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AirdropClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"signalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"userId\",\"type\":\"string\"}],\"name\":\"CompensateProvider\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"FallbackChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"FeeChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensReceived\",\"type\":\"uint256\"}],\"name\":\"PreSaleTokensPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"ProviderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProviderWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"RegistrarChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferDeposits\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"addProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBuy\",\"type\":\"uint256\"}],\"name\":\"changeBuyLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"changeFallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"changeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"changeRegistrar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"checkInWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"claimAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endPreSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"fallbackWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFallbacks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPresaleDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"saleCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountRaised\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountWithdrawable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensLeft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensPerBnb\",\"type\":\"uint256\"}],\"internalType\":\"struct MySignalApp.presaleDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getProviderBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getReferrerBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRegistrarBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_payPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preSaleAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensPerBnb\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isValidProvider\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_signalId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_userId\",\"type\":\"string\"}],\"name\":\"payProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddr\",\"type\":\"address\"}],\"name\":\"providerChangeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"providerWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referrerWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"registrarWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_airdropBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_isPresale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_maxBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_minBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_tokensPerBnb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawPreSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MySignalApp.sol\":\"MySignalApp\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd466e8b07f4c6220eac16da5127f3ff142e65f0c15c03c7d38f257b02c8585e1\",\"license\":\"MIT\"},\"contracts/MySignalApp.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.18;\\n\\nerror MySignalApp__InvalidPresalePurchaseAmount();\\nerror MySignalApp__AllocationExceedsTokensLeft();\\nerror MySignalApp__InsufficientBalance();\\nerror MySignalApp__PresaleMustEnd();\\nerror MySignalApp__TransferFailed();\\nerror MySignalApp__InvalidAddress();\\nerror MySignalApp__NotInWhitelist();\\nerror MySignalApp__AlreadyClaimed();\\nerror MySignalApp__NotInitialized();\\nerror MySignalApp__NotRegistrar();\\nerror MySignalApp__NotProvider();\\nerror MySignalApp__NotFallback();\\nerror MySignalApp__InvalidFee();\\n\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\ncontract MySignalApp is ERC20 {\\n    uint256 public s_airdropBalance;\\n    uint256 private s_registrarBalance;\\n    // uint256 private s_singleDepositBalance;\\n    uint256 private s_fees;\\n    uint256 public s_tokensPerBnb;\\n    uint256 public immutable i_payPercent;\\n    uint256 public s_minBuy = 0.1 ether;\\n    uint256 public s_maxBuy = 1 ether;\\n\\n    struct presaleDetails {\\n        uint256 saleCount;\\n        uint256 amountRaised;\\n        uint256 amountWithdrawable;\\n        uint256 tokensLeft;\\n        uint256 tokensSold;\\n        uint256 tokensPerBnb;\\n    }\\n\\n    presaleDetails private s_preSaleDetails;\\n\\n    bytes32 public immutable i_merkleRoot;\\n\\n    address private s_registrar;\\n    address private s_fallbackAddress;\\n\\n    bool public s_isPresale;\\n    bool public s_isInitialized;\\n\\n    mapping(address => bool) private s_validProvider;\\n    mapping(address => uint256) private s_providerBalance;\\n    mapping(address => uint256) private s_referrerBalance;\\n    mapping(address => bool) private s_claimedAirdrop;\\n    mapping(address => uint256) private s_addressToTokensDeposited;\\n\\n    event CompensateProvider(\\n        address indexed provider,\\n        address indexed referrer,\\n        uint256 amount,\\n        uint256 indexed signalId,\\n        string userId\\n    );\\n    // event SingleDeposit(string id, string userId, uint256 amount);\\n    event PreSaleTokensPurchased(address to, uint256 amount, uint256 tokensReceived);\\n    event AddressProviderChange(address oldAddress, address newAddress);\\n    event TransferDeposits(address indexed provider, uint256 amount);\\n    event ProviderWithdraw(address indexed provider, uint256 amount);\\n    event RegistrarChange(address oldAddress, address newAddress);\\n    event FallbackChange(address oldAddress, address newAddress);\\n    event AirdropClaimed(address to, uint256 amount);\\n    event FeeChange(uint256 oldFee, uint256 newFee);\\n    event ProviderAdded(address provider);\\n\\n    modifier onlyProvider() {\\n        if (!s_validProvider[msg.sender]) {\\n            revert MySignalApp__NotProvider();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyRegistrar() {\\n        if (msg.sender != s_registrar) revert MySignalApp__NotRegistrar();\\n        _;\\n    }\\n\\n    constructor(\\n        address _registrar,\\n        address _fallbackAddress,\\n        uint256 _fee,\\n        uint256 _payPercent,\\n        bytes32 _merkleRoot,\\n        uint256 _airdropBalance\\n    ) ERC20(\\\"Signals Token\\\", \\\"XSN\\\") {\\n        s_registrar = _registrar;\\n        s_validProvider[_registrar] = true;\\n        s_fallbackAddress = _fallbackAddress;\\n        s_airdropBalance = _airdropBalance;\\n        s_fees = _fee;\\n        i_payPercent = _payPercent;\\n        i_merkleRoot = _merkleRoot;\\n\\n        _mint(address(this), _airdropBalance);\\n    }\\n\\n    receive() external payable {\\n        if (!s_isPresale) return;\\n\\n        if (\\n            msg.value < s_minBuy ||\\n            msg.value > s_maxBuy ||\\n            s_addressToTokensDeposited[msg.sender] >= s_maxBuy\\n        ) revert MySignalApp__InvalidPresalePurchaseAmount();\\n\\n        uint256 tokensReceived = msg.value * s_tokensPerBnb;\\n        if (s_preSaleDetails.tokensLeft < tokensReceived)\\n            revert MySignalApp__AllocationExceedsTokensLeft();\\n\\n        s_preSaleDetails.amountRaised += msg.value;\\n        s_preSaleDetails.amountWithdrawable += msg.value;\\n        s_preSaleDetails.saleCount++;\\n        s_preSaleDetails.tokensLeft -= tokensReceived;\\n        s_preSaleDetails.tokensSold += tokensReceived;\\n\\n        s_addressToTokensDeposited[msg.sender]+=msg.value;\\n        emit PreSaleTokensPurchased(msg.sender, msg.value, tokensReceived);\\n\\n        _transfer(address(this), msg.sender, tokensReceived);\\n    }\\n\\n    function initialize(\\n        uint256 totalSupply,\\n        uint256 preSaleAmount,\\n        uint256 tokensPerBnb\\n    ) external onlyRegistrar {\\n        if (s_isInitialized) revert MySignalApp__NotInitialized();\\n        s_isInitialized = true;\\n        s_isPresale = true;\\n        uint256 remainingSupply = totalSupply - preSaleAmount - s_airdropBalance;\\n\\n        s_preSaleDetails = presaleDetails({\\n            saleCount: 0,\\n            amountRaised: 0,\\n            tokensLeft: preSaleAmount,\\n            tokensSold: 0,\\n            tokensPerBnb: tokensPerBnb,\\n            amountWithdrawable: 0\\n        });\\n        s_tokensPerBnb = tokensPerBnb;\\n\\n        _mint(msg.sender, remainingSupply);\\n        _mint(address(this), preSaleAmount);\\n    }\\n\\n    function payProvider(\\n        address _provider,\\n        address _referrer,\\n        uint256 _signalId,\\n        string calldata _userId\\n    ) external {\\n        if (!s_validProvider[_provider]) revert MySignalApp__NotProvider();\\n        uint256 charge = s_fees;\\n        uint256 fee = (charge * i_payPercent) / 100;\\n\\n        if (_referrer != address(0)) {\\n            uint256 sharedFee = (charge - fee) / 2;\\n            s_providerBalance[_provider] += sharedFee;\\n            s_referrerBalance[_referrer] += sharedFee;\\n            s_registrarBalance += fee;\\n            _transfer(msg.sender, address(this), charge);\\n            emit CompensateProvider(_provider, _referrer, sharedFee, _signalId, _userId);\\n            return;\\n        }\\n\\n        s_providerBalance[_provider] += (charge - fee);\\n        s_registrarBalance += fee;\\n        _transfer(msg.sender, address(this), charge);\\n\\n        emit CompensateProvider(_provider, _referrer, charge - fee, _signalId, _userId);\\n    }\\n\\n    function addProvider(address _provider) external onlyRegistrar {\\n        if (_provider == address(0)) revert MySignalApp__InvalidAddress();\\n        s_validProvider[_provider] = true;\\n        emit ProviderAdded(_provider);\\n    }\\n\\n    function providerChangeAddress(address _newAddr) external onlyProvider {\\n        uint256 oldAddressBalance = s_providerBalance[msg.sender];\\n        s_providerBalance[msg.sender] = 0;\\n\\n        s_validProvider[msg.sender] = false;\\n        s_validProvider[_newAddr] = true;\\n        _transfer(address(this), msg.sender, oldAddressBalance);\\n\\n        emit AddressProviderChange(msg.sender, _newAddr);\\n    }\\n\\n    function providerWithdraw(uint256 _amount) external onlyProvider {\\n        if (_amount > s_providerBalance[msg.sender])\\n            revert MySignalApp__InsufficientBalance();\\n\\n        s_providerBalance[msg.sender] -= _amount;\\n        _transfer(address(this), msg.sender, _amount);\\n\\n        emit ProviderWithdraw(msg.sender, _amount);\\n    }\\n\\n    function registrarWithdraw(uint256 _amount) external onlyRegistrar {\\n        if (_amount > s_registrarBalance) revert MySignalApp__InsufficientBalance();\\n\\n        s_registrarBalance -= _amount;\\n        _transfer(address(this), msg.sender, _amount);\\n    }\\n\\n    function referrerWithdraw() external {\\n        uint256 referrerBalance = s_referrerBalance[msg.sender];\\n        s_referrerBalance[msg.sender] = 0;\\n        _transfer(address(this), msg.sender, referrerBalance);\\n    }\\n\\n    function fallbackWithdraw(uint256 _amount) external {\\n        if (s_isPresale) revert MySignalApp__PresaleMustEnd();\\n        if (msg.sender != s_fallbackAddress) revert MySignalApp__NotFallback();\\n        if (_amount > address(this).balance) revert MySignalApp__InsufficientBalance();\\n\\n        (bool sent, ) = payable(msg.sender).call{value: _amount}(\\\"\\\");\\n        if (!sent) revert MySignalApp__TransferFailed();\\n    }\\n\\n    function withdrawPreSale() external onlyRegistrar {\\n        if (s_isPresale) revert MySignalApp__PresaleMustEnd();\\n        uint256 amount = s_preSaleDetails.amountWithdrawable;\\n        s_preSaleDetails.amountWithdrawable = 0;\\n        (bool sent, ) = payable(msg.sender).call{value: amount}(\\\"\\\");\\n        if (!sent) revert MySignalApp__TransferFailed();\\n    }\\n\\n    function endPreSale() external onlyRegistrar {\\n        s_isPresale = false;\\n        uint256 tokensLeft = s_preSaleDetails.tokensLeft;\\n        s_preSaleDetails.tokensLeft = 0;\\n        _burn(address(this), tokensLeft);\\n    }\\n\\n    function changeFee(uint256 _fee) external onlyRegistrar {\\n        uint256 oldFee = s_fees;\\n        s_fees = _fee;\\n        emit FeeChange(oldFee, _fee);\\n    }\\n\\n    function changeRegistrar(address _addr) external onlyRegistrar {\\n        if (_addr == address(0)) revert MySignalApp__InvalidAddress();\\n        address oldAddress = s_registrar;\\n        s_registrar = _addr;\\n        emit RegistrarChange(oldAddress, _addr);\\n    }\\n\\n    function changeFallback(address _addr) external {\\n        if (msg.sender != s_fallbackAddress) revert MySignalApp__NotFallback();\\n        if (_addr == address(0)) revert MySignalApp__InvalidAddress();\\n        address oldAddress = s_fallbackAddress;\\n        s_fallbackAddress = _addr;\\n        emit FallbackChange(oldAddress, _addr);\\n    }\\n\\n    function changeBuyLimits(uint256 _minBuy, uint256 _maxBuy) external onlyRegistrar {\\n        if(!s_isPresale) return;\\n        s_minBuy = _minBuy;\\n        s_maxBuy = _maxBuy;\\n    }\\n\\n    function checkInWhitelist(\\n        bytes32[] calldata _proof,\\n        uint256 _amount\\n    ) public view returns (bool) {\\n        bytes32 leaf = keccak256(abi.encode(msg.sender, _amount));\\n        bool verified = MerkleProof.verify(_proof, i_merkleRoot, leaf);\\n        return verified;\\n    }\\n\\n    function claimAirdrop(bytes32[] calldata _proof, uint256 _amount) external {\\n        if (s_claimedAirdrop[msg.sender]) revert MySignalApp__AlreadyClaimed();\\n        if (!checkInWhitelist(_proof, _amount)) revert MySignalApp__NotInWhitelist();\\n\\n        s_claimedAirdrop[msg.sender] = true;\\n        s_airdropBalance -= _amount;\\n        emit AirdropClaimed(msg.sender, _amount);\\n\\n        _transfer(address(this), msg.sender, _amount);\\n    }\\n\\n    function getFee() external view returns (uint256) {\\n        return s_fees;\\n    }\\n\\n    function getRegistrarBalance() external view returns (uint256) {\\n        return s_registrarBalance;\\n    }\\n\\n    function getFallbacks() external view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    function getProviderBalance(address _addr) external view returns (uint256) {\\n        return s_providerBalance[_addr];\\n    }\\n\\n    function getReferrerBalance(address _addr) external view returns (uint256) {\\n        return s_referrerBalance[_addr];\\n    }\\n\\n    function getPresaleDetails() external view returns (presaleDetails memory) {\\n        return s_preSaleDetails;\\n    }\\n\\n    function isValidProvider(address _addr) external view returns (bool) {\\n        return s_validProvider[_addr];\\n    }\\n}\\n\",\"keccak256\":\"0xbab0d7d41485f5b5472c4409bb592102a6334ed09af3b2d8fd6331db22cc87ad\",\"license\":\"SEE LICENSE IN LICENSE\"}},\"version\":1}",
  "bytecode": "0x60c060405267016345785d8a0000600955670de0b6b3a7640000600a553480156200002957600080fd5b5060405162002e7938038062002e798339810160408190526200004c916200020f565b6040518060400160405280600d81526020016c29b4b3b730b639902a37b5b2b760991b815250604051806040016040528060038152602001622c29a760e91b81525081600390816200009f919062000310565b506004620000ae828262000310565b5050601180546001600160a01b03199081166001600160a01b038a81169182179093556000908152601360205260409020805460ff19166001179055601280549091169188169190911790555060058190556007849055608083905260a08290526200011b308262000127565b50505050505062000404565b6001600160a01b038216620001825760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b8060026000828254620001969190620003dc565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b505050565b80516001600160a01b03811681146200020a57600080fd5b919050565b60008060008060008060c087890312156200022957600080fd5b6200023487620001f2565b95506200024460208801620001f2565b945060408701519350606087015192506080870151915060a087015190509295509295509295565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200029757607f821691505b602082108103620002b857634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001ed57600081815260208120601f850160051c81016020861015620002e75750805b601f850160051c820191505b818110156200030857828155600101620002f3565b505050505050565b81516001600160401b038111156200032c576200032c6200026c565b62000344816200033d845462000282565b84620002be565b602080601f8311600181146200037c5760008415620003635750858301515b600019600386901b1c1916600185901b17855562000308565b600085815260208120601f198616915b82811015620003ad578886015182559484019460019091019084016200038c565b5085821015620003cc5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b80820180821115620003fe57634e487b7160e01b600052601160045260246000fd5b92915050565b60805160a051612a416200043860003960008181610a210152610e5e01526000818161084101526111b90152612a416000f3fe6080604052600436106102d55760003560e01c80636a1db1bf116101795780639e2176f9116100d6578063b2bbefdb1161008a578063db7f967911610064578063db7f967914610a58578063dd62ed3e14610a6d578063ee889ed014610ac057600080fd5b8063b2bbefdb146109c9578063c73b959b14610a0f578063ced72f8714610a4357600080fd5b8063a89e6edd116100bb578063a89e6edd14610950578063a9059cbb14610966578063abc3bc921461098657600080fd5b80639e2176f914610910578063a457c2d71461093057600080fd5b806380d859111161012d5780638a3def65116101125780638a3def65146108c657806395d89b41146108e65780639b2f9842146108fb57600080fd5b806380d8591114610863578063832eea0c1461088357600080fd5b806370a082311161015e57806370a08231146107cc57806376b588101461080f5780637d91eef21461082f57600080fd5b80636a1db1bf146107795780636fb1338b1461079957600080fd5b80632e41b5901161023257806333fd7b07116101e657806346e2577a116101c057806346e2577a146106d85780634729376b146106f8578063576cf6671461075957600080fd5b806333fd7b07146106715780633921c41d1461068657806339509351146106b857600080fd5b8063313ce56711610217578063313ce567146106155780633272b7b7146106315780633335252b1461065157600080fd5b80632e41b590146105df5780632ee7e4a6146105ff57600080fd5b80631d7f80ae1161028957806325d638e51161026e57806325d638e51461059657806325fe7b7f146105a95780632b96942b146105bf57600080fd5b80631d7f80ae1461055657806323b872dd1461057657600080fd5b806318160ddd116102ba57806318160ddd14610501578063183473f41461052057806319a542971461054057600080fd5b806306fdde03146104a6578063095ea7b3146104d157600080fd5b366104a15760125474010000000000000000000000000000000000000000900460ff166102fe57005b60095434108061030f5750600a5434115b8061032b5750600a543360009081526017602052604090205410155b15610362576040517f7c515e3e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006008543461037291906125bf565b905080600b6003015410156103b3576040517fec52c3c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b34600b60010160008282546103c891906125d6565b9091555050600d80543491906000906103e29084906125d6565b9091555050600b80549060006103f7836125e9565b919050555080600b60030160008282546104119190612621565b9091555050600f805482919060009061042b9084906125d6565b9091555050336000908152601760205260408120805434929061044f9084906125d6565b9091555050604080513381523460208201529081018290527fcefc009576cd0af550258c26c1d32581f56d12a2396adcdb3c064c3de21880959060600160405180910390a161049f303383610ad5565b005b600080fd5b3480156104b257600080fd5b506104bb610d4b565b6040516104c89190612634565b60405180910390f35b3480156104dd57600080fd5b506104f16104ec3660046126c9565b610ddd565b60405190151581526020016104c8565b34801561050d57600080fd5b506002545b6040519081526020016104c8565b34801561052c57600080fd5b506104f161053b3660046126f3565b610df7565b34801561054c57600080fd5b5061051260095481565b34801561056257600080fd5b5061049f61057136600461276e565b610e93565b34801561058257600080fd5b506104f1610591366004612789565b610fab565b3480156105a257600080fd5b5047610512565b3480156105b557600080fd5b5061051260055481565b3480156105cb57600080fd5b5061049f6105da3660046127c5565b610fcf565b3480156105eb57600080fd5b5061049f6105fa3660046127de565b61114e565b34801561060b57600080fd5b50610512600a5481565b34801561062157600080fd5b50604051601281526020016104c8565b34801561063d57600080fd5b5061049f61064c366004612879565b611401565b34801561065d57600080fd5b5061049f61066c3660046126f3565b611480565b34801561067d57600080fd5b5061049f6115a3565b34801561069257600080fd5b506012546104f19074010000000000000000000000000000000000000000900460ff1681565b3480156106c457600080fd5b506104f16106d33660046126c9565b6115c7565b3480156106e457600080fd5b5061049f6106f336600461276e565b611613565b34801561070457600080fd5b5061070d611736565b6040516104c89190600060c082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015292915050565b34801561076557600080fd5b5061049f61077436600461276e565b6117ac565b34801561078557600080fd5b5061049f6107943660046127c5565b6118c9565b3480156107a557600080fd5b506012546104f1907501000000000000000000000000000000000000000000900460ff1681565b3480156107d857600080fd5b506105126107e736600461276e565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b34801561081b57600080fd5b5061049f61082a36600461276e565b611958565b34801561083b57600080fd5b506105127f000000000000000000000000000000000000000000000000000000000000000081565b34801561086f57600080fd5b5061049f61087e36600461289b565b611a75565b34801561088f57600080fd5b5061051261089e36600461276e565b73ffffffffffffffffffffffffffffffffffffffff1660009081526014602052604090205490565b3480156108d257600080fd5b5061049f6108e13660046127c5565b611bdd565b3480156108f257600080fd5b506104bb611c8d565b34801561090757600080fd5b50600654610512565b34801561091c57600080fd5b5061049f61092b3660046127c5565b611c9c565b34801561093c57600080fd5b506104f161094b3660046126c9565b611d96565b34801561095c57600080fd5b5061051260085481565b34801561097257600080fd5b506104f16109813660046126c9565b611e67565b34801561099257600080fd5b506105126109a136600461276e565b73ffffffffffffffffffffffffffffffffffffffff1660009081526015602052604090205490565b3480156109d557600080fd5b506104f16109e436600461276e565b73ffffffffffffffffffffffffffffffffffffffff1660009081526013602052604090205460ff1690565b348015610a1b57600080fd5b506105127f000000000000000000000000000000000000000000000000000000000000000081565b348015610a4f57600080fd5b50600754610512565b348015610a6457600080fd5b5061049f611e75565b348015610a7957600080fd5b50610512610a883660046128c7565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b348015610acc57600080fd5b5061049f611f34565b73ffffffffffffffffffffffffffffffffffffffff8316610b7d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216610c20576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610b74565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020819052604090205481811015610cd6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610b74565b73ffffffffffffffffffffffffffffffffffffffff848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35b50505050565b606060038054610d5a906128fa565b80601f0160208091040260200160405190810160405280929190818152602001828054610d86906128fa565b8015610dd35780601f10610da857610100808354040283529160200191610dd3565b820191906000526020600020905b815481529060010190602001808311610db657829003601f168201915b5050505050905090565b600033610deb818585611fc0565b60019150505b92915050565b6040805133602082015290810182905260009081906060016040516020818303038152906040528051906020012090506000610e898686808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152507f000000000000000000000000000000000000000000000000000000000000000092508691506121739050565b9695505050505050565b3360009081526013602052604090205460ff16610edc576040517fa41eb8c200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336000818152601460209081526040808320805490849055601390925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0090811690915573ffffffffffffffffffffffffffffffffffffffff861684529220805490921660011790915590610f5890309083610ad5565b6040805133815273ffffffffffffffffffffffffffffffffffffffff841660208201527f5bbda34f4283e006dc680407c75f3f17c43d2869c203923c1331d3800398a71b91015b60405180910390a15050565b600033610fb9858285612189565b610fc4858585610ad5565b506001949350505050565b60125474010000000000000000000000000000000000000000900460ff1615611024576040517f3b9556f800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60125473ffffffffffffffffffffffffffffffffffffffff163314611075576040517f824f28fa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b478111156110af576040517f882b286b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff16826040515b60006040518083038185875af1925050503d806000811461110a576040519150601f19603f3d011682016040523d82523d6000602084013e61110f565b606091505b505090508061114a576040517f1f2f4bab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b73ffffffffffffffffffffffffffffffffffffffff851660009081526013602052604090205460ff166111ad576040517fa41eb8c200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600754600060646111de7f0000000000000000000000000000000000000000000000000000000000000000846125bf565b6111e8919061294d565b905073ffffffffffffffffffffffffffffffffffffffff86161561132e57600060026112148385612621565b61121e919061294d565b73ffffffffffffffffffffffffffffffffffffffff89166000908152601460205260408120805492935083929091906112589084906125d6565b909155505073ffffffffffffffffffffffffffffffffffffffff8716600090815260156020526040812080548392906112929084906125d6565b9250508190555081600660008282546112ab91906125d6565b909155506112bc9050333085610ad5565b858773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff167f8796fed90e2848cb224d49106d22a29aa40c22c1a2b21acd42d9bce9423713e284898960405161131e93929190612988565b60405180910390a45050506113fa565b6113388183612621565b73ffffffffffffffffffffffffffffffffffffffff88166000908152601460205260408120805490919061136d9084906125d6565b92505081905550806006600082825461138691906125d6565b909155506113979050333084610ad5565b8473ffffffffffffffffffffffffffffffffffffffff8088169089167f8796fed90e2848cb224d49106d22a29aa40c22c1a2b21acd42d9bce9423713e26113de8587612621565b88886040516113ef93929190612988565b60405180910390a450505b5050505050565b60115473ffffffffffffffffffffffffffffffffffffffff163314611452576040517fece6d48800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60125474010000000000000000000000000000000000000000900460ff161561114a57600991909155600a55565b3360009081526016602052604090205460ff16156114ca576040517f68ac8e6900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6114d5838383610df7565b61150b576040517f1845a60f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b33600090815260166020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905560058054839290611555908490612621565b909155505060408051338152602081018390527f650e45f04ef8a0c267b2f78d983913f69ae3a353b2b32de5429307522be0ab55910160405180910390a161159e303383610ad5565b505050565b3360008181526015602052604081208054919055906115c490309083610ad5565b50565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152812054909190610deb908290869061160e9087906125d6565b611fc0565b60115473ffffffffffffffffffffffffffffffffffffffff163314611664576040517fece6d48800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff81166116b1576040517f247e2d4a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff811660008181526013602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905590519182527fae9c2c6481964847714ce58f65a7f6dcc41d0d8394449bacdf161b5920c4744a910160405180910390a150565b61176f6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b506040805160c081018252600b548152600c546020820152600d5491810191909152600e546060820152600f54608082015260105460a082015290565b60125473ffffffffffffffffffffffffffffffffffffffff1633146117fd576040517f824f28fa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff811661184a576040517f247e2d4a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6012805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff000000000000000000000000000000000000000083168117909355604080519190921680825260208201939093527f9cfd98ce2b0572a77cf9d71bacef7955c853a989204db1ce37fbee74f280d35b9101610f9f565b60115473ffffffffffffffffffffffffffffffffffffffff16331461191a576040517fece6d48800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600780549082905560408051828152602081018490527fa995ac7c2dc5fdc05b41983e69d4d9fbd224a8528bc7d86eabfd533cd3ca44979101610f9f565b60115473ffffffffffffffffffffffffffffffffffffffff1633146119a9576040517fece6d48800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff81166119f6576040517f247e2d4a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6011805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff000000000000000000000000000000000000000083168117909355604080519190921680825260208201939093527faa91ef4e7d0a22f1b92d0eb50b6e60b1034e11c61318a81e150143d5715ebb399101610f9f565b60115473ffffffffffffffffffffffffffffffffffffffff163314611ac6576040517fece6d48800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6012547501000000000000000000000000000000000000000000900460ff1615611b1c576040517f8657fcf000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b601280547fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff167501010000000000000000000000000000000000000000179055600554600090611b6c8486612621565b611b769190612621565b6040805160c081018252600080825260208201819052918101829052606081018690526080810182905260a001849052600b819055600c819055600d819055600e859055600f55601083905560088390559050611bd3338261225a565b610d45308461225a565b60115473ffffffffffffffffffffffffffffffffffffffff163314611c2e576040517fece6d48800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600654811115611c6a576040517f882b286b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060066000828254611c7c9190612621565b909155506115c49050303383610ad5565b606060048054610d5a906128fa565b3360009081526013602052604090205460ff16611ce5576040517fa41eb8c200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b33600090815260146020526040902054811115611d2e576040517f882b286b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360009081526014602052604081208054839290611d4d908490612621565b90915550611d5e9050303383610ad5565b60405181815233907f12e802b6ed6e970b958406df898001b6336cab376c17f335ea72d122ecdf3c2d9060200160405180910390a250565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915281205490919083811015611e5a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610b74565b610fc48286868403611fc0565b600033610deb818585610ad5565b60115473ffffffffffffffffffffffffffffffffffffffff163314611ec6576040517fece6d48800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60125474010000000000000000000000000000000000000000900460ff1615611f1b576040517f3b9556f800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600d8054600091829055604051909190339083906110cd565b60115473ffffffffffffffffffffffffffffffffffffffff163314611f85576040517fece6d48800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b601280547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff169055600e805460009091556115c4308261234d565b73ffffffffffffffffffffffffffffffffffffffff8316612062576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610b74565b73ffffffffffffffffffffffffffffffffffffffff8216612105576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610b74565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000826121808584612511565b14949350505050565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152600160209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610d45578181101561224d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610b74565b610d458484848403611fc0565b73ffffffffffffffffffffffffffffffffffffffff82166122d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610b74565b80600260008282546122e991906125d6565b909155505073ffffffffffffffffffffffffffffffffffffffff8216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b73ffffffffffffffffffffffffffffffffffffffff82166123f0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610b74565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260208190526040902054818110156124a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152608401610b74565b73ffffffffffffffffffffffffffffffffffffffff83166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b600081815b84518110156125565761254282868381518110612535576125356129dc565b602002602001015161255e565b91508061254e816125e9565b915050612516565b509392505050565b600081831061257a576000828152602084905260409020612589565b60008381526020839052604090205b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082028115828204841417610df157610df1612590565b80820180821115610df157610df1612590565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361261a5761261a612590565b5060010190565b81810381811115610df157610df1612590565b600060208083528351808285015260005b8181101561266157858101830151858201604001528201612645565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b803573ffffffffffffffffffffffffffffffffffffffff811681146126c457600080fd5b919050565b600080604083850312156126dc57600080fd5b6126e5836126a0565b946020939093013593505050565b60008060006040848603121561270857600080fd5b833567ffffffffffffffff8082111561272057600080fd5b818601915086601f83011261273457600080fd5b81358181111561274357600080fd5b8760208260051b850101111561275857600080fd5b6020928301989097509590910135949350505050565b60006020828403121561278057600080fd5b612589826126a0565b60008060006060848603121561279e57600080fd5b6127a7846126a0565b92506127b5602085016126a0565b9150604084013590509250925092565b6000602082840312156127d757600080fd5b5035919050565b6000806000806000608086880312156127f657600080fd5b6127ff866126a0565b945061280d602087016126a0565b935060408601359250606086013567ffffffffffffffff8082111561283157600080fd5b818801915088601f83011261284557600080fd5b81358181111561285457600080fd5b89602082850101111561286657600080fd5b9699959850939650602001949392505050565b6000806040838503121561288c57600080fd5b50508035926020909101359150565b6000806000606084860312156128b057600080fd5b505081359360208301359350604090920135919050565b600080604083850312156128da57600080fd5b6128e3836126a0565b91506128f1602084016126a0565b90509250929050565b600181811c9082168061290e57607f821691505b602082108103612947577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b600082612983577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b83815260406020820152816040820152818360608301376000818301606090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016010192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea26469706673582212200a98151593a0ff40eb0f15cc70b9d7c0213cdd42f6251d203452168290f1b9c464736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106102d55760003560e01c80636a1db1bf116101795780639e2176f9116100d6578063b2bbefdb1161008a578063db7f967911610064578063db7f967914610a58578063dd62ed3e14610a6d578063ee889ed014610ac057600080fd5b8063b2bbefdb146109c9578063c73b959b14610a0f578063ced72f8714610a4357600080fd5b8063a89e6edd116100bb578063a89e6edd14610950578063a9059cbb14610966578063abc3bc921461098657600080fd5b80639e2176f914610910578063a457c2d71461093057600080fd5b806380d859111161012d5780638a3def65116101125780638a3def65146108c657806395d89b41146108e65780639b2f9842146108fb57600080fd5b806380d8591114610863578063832eea0c1461088357600080fd5b806370a082311161015e57806370a08231146107cc57806376b588101461080f5780637d91eef21461082f57600080fd5b80636a1db1bf146107795780636fb1338b1461079957600080fd5b80632e41b5901161023257806333fd7b07116101e657806346e2577a116101c057806346e2577a146106d85780634729376b146106f8578063576cf6671461075957600080fd5b806333fd7b07146106715780633921c41d1461068657806339509351146106b857600080fd5b8063313ce56711610217578063313ce567146106155780633272b7b7146106315780633335252b1461065157600080fd5b80632e41b590146105df5780632ee7e4a6146105ff57600080fd5b80631d7f80ae1161028957806325d638e51161026e57806325d638e51461059657806325fe7b7f146105a95780632b96942b146105bf57600080fd5b80631d7f80ae1461055657806323b872dd1461057657600080fd5b806318160ddd116102ba57806318160ddd14610501578063183473f41461052057806319a542971461054057600080fd5b806306fdde03146104a6578063095ea7b3146104d157600080fd5b366104a15760125474010000000000000000000000000000000000000000900460ff166102fe57005b60095434108061030f5750600a5434115b8061032b5750600a543360009081526017602052604090205410155b15610362576040517f7c515e3e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006008543461037291906125bf565b905080600b6003015410156103b3576040517fec52c3c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b34600b60010160008282546103c891906125d6565b9091555050600d80543491906000906103e29084906125d6565b9091555050600b80549060006103f7836125e9565b919050555080600b60030160008282546104119190612621565b9091555050600f805482919060009061042b9084906125d6565b9091555050336000908152601760205260408120805434929061044f9084906125d6565b9091555050604080513381523460208201529081018290527fcefc009576cd0af550258c26c1d32581f56d12a2396adcdb3c064c3de21880959060600160405180910390a161049f303383610ad5565b005b600080fd5b3480156104b257600080fd5b506104bb610d4b565b6040516104c89190612634565b60405180910390f35b3480156104dd57600080fd5b506104f16104ec3660046126c9565b610ddd565b60405190151581526020016104c8565b34801561050d57600080fd5b506002545b6040519081526020016104c8565b34801561052c57600080fd5b506104f161053b3660046126f3565b610df7565b34801561054c57600080fd5b5061051260095481565b34801561056257600080fd5b5061049f61057136600461276e565b610e93565b34801561058257600080fd5b506104f1610591366004612789565b610fab565b3480156105a257600080fd5b5047610512565b3480156105b557600080fd5b5061051260055481565b3480156105cb57600080fd5b5061049f6105da3660046127c5565b610fcf565b3480156105eb57600080fd5b5061049f6105fa3660046127de565b61114e565b34801561060b57600080fd5b50610512600a5481565b34801561062157600080fd5b50604051601281526020016104c8565b34801561063d57600080fd5b5061049f61064c366004612879565b611401565b34801561065d57600080fd5b5061049f61066c3660046126f3565b611480565b34801561067d57600080fd5b5061049f6115a3565b34801561069257600080fd5b506012546104f19074010000000000000000000000000000000000000000900460ff1681565b3480156106c457600080fd5b506104f16106d33660046126c9565b6115c7565b3480156106e457600080fd5b5061049f6106f336600461276e565b611613565b34801561070457600080fd5b5061070d611736565b6040516104c89190600060c082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015292915050565b34801561076557600080fd5b5061049f61077436600461276e565b6117ac565b34801561078557600080fd5b5061049f6107943660046127c5565b6118c9565b3480156107a557600080fd5b506012546104f1907501000000000000000000000000000000000000000000900460ff1681565b3480156107d857600080fd5b506105126107e736600461276e565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b34801561081b57600080fd5b5061049f61082a36600461276e565b611958565b34801561083b57600080fd5b506105127f000000000000000000000000000000000000000000000000000000000000000081565b34801561086f57600080fd5b5061049f61087e36600461289b565b611a75565b34801561088f57600080fd5b5061051261089e36600461276e565b73ffffffffffffffffffffffffffffffffffffffff1660009081526014602052604090205490565b3480156108d257600080fd5b5061049f6108e13660046127c5565b611bdd565b3480156108f257600080fd5b506104bb611c8d565b34801561090757600080fd5b50600654610512565b34801561091c57600080fd5b5061049f61092b3660046127c5565b611c9c565b34801561093c57600080fd5b506104f161094b3660046126c9565b611d96565b34801561095c57600080fd5b5061051260085481565b34801561097257600080fd5b506104f16109813660046126c9565b611e67565b34801561099257600080fd5b506105126109a136600461276e565b73ffffffffffffffffffffffffffffffffffffffff1660009081526015602052604090205490565b3480156109d557600080fd5b506104f16109e436600461276e565b73ffffffffffffffffffffffffffffffffffffffff1660009081526013602052604090205460ff1690565b348015610a1b57600080fd5b506105127f000000000000000000000000000000000000000000000000000000000000000081565b348015610a4f57600080fd5b50600754610512565b348015610a6457600080fd5b5061049f611e75565b348015610a7957600080fd5b50610512610a883660046128c7565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b348015610acc57600080fd5b5061049f611f34565b73ffffffffffffffffffffffffffffffffffffffff8316610b7d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216610c20576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610b74565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020819052604090205481811015610cd6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610b74565b73ffffffffffffffffffffffffffffffffffffffff848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35b50505050565b606060038054610d5a906128fa565b80601f0160208091040260200160405190810160405280929190818152602001828054610d86906128fa565b8015610dd35780601f10610da857610100808354040283529160200191610dd3565b820191906000526020600020905b815481529060010190602001808311610db657829003601f168201915b5050505050905090565b600033610deb818585611fc0565b60019150505b92915050565b6040805133602082015290810182905260009081906060016040516020818303038152906040528051906020012090506000610e898686808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152507f000000000000000000000000000000000000000000000000000000000000000092508691506121739050565b9695505050505050565b3360009081526013602052604090205460ff16610edc576040517fa41eb8c200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336000818152601460209081526040808320805490849055601390925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0090811690915573ffffffffffffffffffffffffffffffffffffffff861684529220805490921660011790915590610f5890309083610ad5565b6040805133815273ffffffffffffffffffffffffffffffffffffffff841660208201527f5bbda34f4283e006dc680407c75f3f17c43d2869c203923c1331d3800398a71b91015b60405180910390a15050565b600033610fb9858285612189565b610fc4858585610ad5565b506001949350505050565b60125474010000000000000000000000000000000000000000900460ff1615611024576040517f3b9556f800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60125473ffffffffffffffffffffffffffffffffffffffff163314611075576040517f824f28fa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b478111156110af576040517f882b286b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff16826040515b60006040518083038185875af1925050503d806000811461110a576040519150601f19603f3d011682016040523d82523d6000602084013e61110f565b606091505b505090508061114a576040517f1f2f4bab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b73ffffffffffffffffffffffffffffffffffffffff851660009081526013602052604090205460ff166111ad576040517fa41eb8c200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600754600060646111de7f0000000000000000000000000000000000000000000000000000000000000000846125bf565b6111e8919061294d565b905073ffffffffffffffffffffffffffffffffffffffff86161561132e57600060026112148385612621565b61121e919061294d565b73ffffffffffffffffffffffffffffffffffffffff89166000908152601460205260408120805492935083929091906112589084906125d6565b909155505073ffffffffffffffffffffffffffffffffffffffff8716600090815260156020526040812080548392906112929084906125d6565b9250508190555081600660008282546112ab91906125d6565b909155506112bc9050333085610ad5565b858773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff167f8796fed90e2848cb224d49106d22a29aa40c22c1a2b21acd42d9bce9423713e284898960405161131e93929190612988565b60405180910390a45050506113fa565b6113388183612621565b73ffffffffffffffffffffffffffffffffffffffff88166000908152601460205260408120805490919061136d9084906125d6565b92505081905550806006600082825461138691906125d6565b909155506113979050333084610ad5565b8473ffffffffffffffffffffffffffffffffffffffff8088169089167f8796fed90e2848cb224d49106d22a29aa40c22c1a2b21acd42d9bce9423713e26113de8587612621565b88886040516113ef93929190612988565b60405180910390a450505b5050505050565b60115473ffffffffffffffffffffffffffffffffffffffff163314611452576040517fece6d48800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60125474010000000000000000000000000000000000000000900460ff161561114a57600991909155600a55565b3360009081526016602052604090205460ff16156114ca576040517f68ac8e6900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6114d5838383610df7565b61150b576040517f1845a60f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b33600090815260166020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905560058054839290611555908490612621565b909155505060408051338152602081018390527f650e45f04ef8a0c267b2f78d983913f69ae3a353b2b32de5429307522be0ab55910160405180910390a161159e303383610ad5565b505050565b3360008181526015602052604081208054919055906115c490309083610ad5565b50565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152812054909190610deb908290869061160e9087906125d6565b611fc0565b60115473ffffffffffffffffffffffffffffffffffffffff163314611664576040517fece6d48800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff81166116b1576040517f247e2d4a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff811660008181526013602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905590519182527fae9c2c6481964847714ce58f65a7f6dcc41d0d8394449bacdf161b5920c4744a910160405180910390a150565b61176f6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b506040805160c081018252600b548152600c546020820152600d5491810191909152600e546060820152600f54608082015260105460a082015290565b60125473ffffffffffffffffffffffffffffffffffffffff1633146117fd576040517f824f28fa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff811661184a576040517f247e2d4a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6012805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff000000000000000000000000000000000000000083168117909355604080519190921680825260208201939093527f9cfd98ce2b0572a77cf9d71bacef7955c853a989204db1ce37fbee74f280d35b9101610f9f565b60115473ffffffffffffffffffffffffffffffffffffffff16331461191a576040517fece6d48800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600780549082905560408051828152602081018490527fa995ac7c2dc5fdc05b41983e69d4d9fbd224a8528bc7d86eabfd533cd3ca44979101610f9f565b60115473ffffffffffffffffffffffffffffffffffffffff1633146119a9576040517fece6d48800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff81166119f6576040517f247e2d4a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6011805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff000000000000000000000000000000000000000083168117909355604080519190921680825260208201939093527faa91ef4e7d0a22f1b92d0eb50b6e60b1034e11c61318a81e150143d5715ebb399101610f9f565b60115473ffffffffffffffffffffffffffffffffffffffff163314611ac6576040517fece6d48800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6012547501000000000000000000000000000000000000000000900460ff1615611b1c576040517f8657fcf000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b601280547fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff167501010000000000000000000000000000000000000000179055600554600090611b6c8486612621565b611b769190612621565b6040805160c081018252600080825260208201819052918101829052606081018690526080810182905260a001849052600b819055600c819055600d819055600e859055600f55601083905560088390559050611bd3338261225a565b610d45308461225a565b60115473ffffffffffffffffffffffffffffffffffffffff163314611c2e576040517fece6d48800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600654811115611c6a576040517f882b286b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060066000828254611c7c9190612621565b909155506115c49050303383610ad5565b606060048054610d5a906128fa565b3360009081526013602052604090205460ff16611ce5576040517fa41eb8c200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b33600090815260146020526040902054811115611d2e576040517f882b286b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360009081526014602052604081208054839290611d4d908490612621565b90915550611d5e9050303383610ad5565b60405181815233907f12e802b6ed6e970b958406df898001b6336cab376c17f335ea72d122ecdf3c2d9060200160405180910390a250565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915281205490919083811015611e5a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610b74565b610fc48286868403611fc0565b600033610deb818585610ad5565b60115473ffffffffffffffffffffffffffffffffffffffff163314611ec6576040517fece6d48800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60125474010000000000000000000000000000000000000000900460ff1615611f1b576040517f3b9556f800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600d8054600091829055604051909190339083906110cd565b60115473ffffffffffffffffffffffffffffffffffffffff163314611f85576040517fece6d48800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b601280547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff169055600e805460009091556115c4308261234d565b73ffffffffffffffffffffffffffffffffffffffff8316612062576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610b74565b73ffffffffffffffffffffffffffffffffffffffff8216612105576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610b74565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000826121808584612511565b14949350505050565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152600160209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610d45578181101561224d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610b74565b610d458484848403611fc0565b73ffffffffffffffffffffffffffffffffffffffff82166122d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610b74565b80600260008282546122e991906125d6565b909155505073ffffffffffffffffffffffffffffffffffffffff8216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b73ffffffffffffffffffffffffffffffffffffffff82166123f0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610b74565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260208190526040902054818110156124a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152608401610b74565b73ffffffffffffffffffffffffffffffffffffffff83166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b600081815b84518110156125565761254282868381518110612535576125356129dc565b602002602001015161255e565b91508061254e816125e9565b915050612516565b509392505050565b600081831061257a576000828152602084905260409020612589565b60008381526020839052604090205b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082028115828204841417610df157610df1612590565b80820180821115610df157610df1612590565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361261a5761261a612590565b5060010190565b81810381811115610df157610df1612590565b600060208083528351808285015260005b8181101561266157858101830151858201604001528201612645565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b803573ffffffffffffffffffffffffffffffffffffffff811681146126c457600080fd5b919050565b600080604083850312156126dc57600080fd5b6126e5836126a0565b946020939093013593505050565b60008060006040848603121561270857600080fd5b833567ffffffffffffffff8082111561272057600080fd5b818601915086601f83011261273457600080fd5b81358181111561274357600080fd5b8760208260051b850101111561275857600080fd5b6020928301989097509590910135949350505050565b60006020828403121561278057600080fd5b612589826126a0565b60008060006060848603121561279e57600080fd5b6127a7846126a0565b92506127b5602085016126a0565b9150604084013590509250925092565b6000602082840312156127d757600080fd5b5035919050565b6000806000806000608086880312156127f657600080fd5b6127ff866126a0565b945061280d602087016126a0565b935060408601359250606086013567ffffffffffffffff8082111561283157600080fd5b818801915088601f83011261284557600080fd5b81358181111561285457600080fd5b89602082850101111561286657600080fd5b9699959850939650602001949392505050565b6000806040838503121561288c57600080fd5b50508035926020909101359150565b6000806000606084860312156128b057600080fd5b505081359360208301359350604090920135919050565b600080604083850312156128da57600080fd5b6128e3836126a0565b91506128f1602084016126a0565b90509250929050565b600181811c9082168061290e57607f821691505b602082108103612947577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b600082612983577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b83815260406020820152816040820152818360608301376000818301606090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016010192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea26469706673582212200a98151593a0ff40eb0f15cc70b9d7c0213cdd42f6251d203452168290f1b9c464736f6c63430008120033",
  "devdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      }
    },
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15,
        "contract": "contracts/MySignalApp.sol:MySignalApp",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 21,
        "contract": "contracts/MySignalApp.sol:MySignalApp",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 23,
        "contract": "contracts/MySignalApp.sol:MySignalApp",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 25,
        "contract": "contracts/MySignalApp.sol:MySignalApp",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 27,
        "contract": "contracts/MySignalApp.sol:MySignalApp",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 1249,
        "contract": "contracts/MySignalApp.sol:MySignalApp",
        "label": "s_airdropBalance",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1251,
        "contract": "contracts/MySignalApp.sol:MySignalApp",
        "label": "s_registrarBalance",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1253,
        "contract": "contracts/MySignalApp.sol:MySignalApp",
        "label": "s_fees",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1255,
        "contract": "contracts/MySignalApp.sol:MySignalApp",
        "label": "s_tokensPerBnb",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1260,
        "contract": "contracts/MySignalApp.sol:MySignalApp",
        "label": "s_minBuy",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1263,
        "contract": "contracts/MySignalApp.sol:MySignalApp",
        "label": "s_maxBuy",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 1279,
        "contract": "contracts/MySignalApp.sol:MySignalApp",
        "label": "s_preSaleDetails",
        "offset": 0,
        "slot": "11",
        "type": "t_struct(presaleDetails)1276_storage"
      },
      {
        "astId": 1283,
        "contract": "contracts/MySignalApp.sol:MySignalApp",
        "label": "s_registrar",
        "offset": 0,
        "slot": "17",
        "type": "t_address"
      },
      {
        "astId": 1285,
        "contract": "contracts/MySignalApp.sol:MySignalApp",
        "label": "s_fallbackAddress",
        "offset": 0,
        "slot": "18",
        "type": "t_address"
      },
      {
        "astId": 1287,
        "contract": "contracts/MySignalApp.sol:MySignalApp",
        "label": "s_isPresale",
        "offset": 20,
        "slot": "18",
        "type": "t_bool"
      },
      {
        "astId": 1289,
        "contract": "contracts/MySignalApp.sol:MySignalApp",
        "label": "s_isInitialized",
        "offset": 21,
        "slot": "18",
        "type": "t_bool"
      },
      {
        "astId": 1293,
        "contract": "contracts/MySignalApp.sol:MySignalApp",
        "label": "s_validProvider",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1297,
        "contract": "contracts/MySignalApp.sol:MySignalApp",
        "label": "s_providerBalance",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1301,
        "contract": "contracts/MySignalApp.sol:MySignalApp",
        "label": "s_referrerBalance",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1305,
        "contract": "contracts/MySignalApp.sol:MySignalApp",
        "label": "s_claimedAirdrop",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1309,
        "contract": "contracts/MySignalApp.sol:MySignalApp",
        "label": "s_addressToTokensDeposited",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(presaleDetails)1276_storage": {
        "encoding": "inplace",
        "label": "struct MySignalApp.presaleDetails",
        "members": [
          {
            "astId": 1265,
            "contract": "contracts/MySignalApp.sol:MySignalApp",
            "label": "saleCount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1267,
            "contract": "contracts/MySignalApp.sol:MySignalApp",
            "label": "amountRaised",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1269,
            "contract": "contracts/MySignalApp.sol:MySignalApp",
            "label": "amountWithdrawable",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1271,
            "contract": "contracts/MySignalApp.sol:MySignalApp",
            "label": "tokensLeft",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1273,
            "contract": "contracts/MySignalApp.sol:MySignalApp",
            "label": "tokensSold",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1275,
            "contract": "contracts/MySignalApp.sol:MySignalApp",
            "label": "tokensPerBnb",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}