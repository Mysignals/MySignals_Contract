const { ethers } = require("hardhat");
const keccak256 = require("keccak256");
const { MerkleTree } = require("merkletreejs");
const fs = require("fs");
const csv = require("csv-parser");

// Create an array of ABI-encoded elements to put in the Merkle Tree
const list = [];
let total = 0;

// Get Token Holders
const filePath =
    "export-tokenholders-for-contract-0xd55d9C669E61d4626601bbFFcd0c54C5856d34e5.csv";

// Create a readable stream from the CSV file
const readableStream = fs.createReadStream(filePath);

// Use the csv-parser to parse the CSV content
readableStream
    .pipe(csv())
    .on("data", (row) => {
        // Your custom logic for each row goes here
        // console.log( row);
        list.push(encodeLeaf(row.HolderAddress, ethers.utils.parseEther(row.Balance)));
        total = total + parseInt(row.Balance);
        // Example: Accessing specific columns
        // const columnName = row['Column Name'];
        // console.log('Specific Column:', columnName);
    })
    .on("end", () => {
        console.log("CSV file reading finished.");

        const merkleTree = new MerkleTree(list, keccak256, {
            hashLeaves: true, // Hash each leaf using keccak256 to make them fixed-size
            sortPairs: true, // Sort the tree for determinstic output
            sortLeaves: true,
        });
        // Compute the Merkle Root in Hexadecimal
        const root = merkleTree.getHexRoot();
        // const leaf = keccak256(list[0]); // The hash of the node

        // const proof = merkleTree.getHexProof(leaf);
        // console.log("proof",proof);
        console.log("root", root);
        console.log("total", total);
        // console.log(list)
    })
    .on("error", (error) => {
        console.error("Error reading CSV file:", error.message);
    });

const list2 = [
    "0x000000000000000000000000b1d2fefa6073c9ed692047855b7b9ccecd332be2000000000000000000000000000000000000000000002a5a058fc295ed000000",
    "0x000000000000000000000000c9f30e43527bf0242481166b3ac64810ee7e661d000000000000000000000000000000000000000000002a5a058fc295ed000000",
    "0x000000000000000000000000ba662818b2d76a0592335d9b99d4a952b38062fc000000000000000000000000000000000000000000002a5a058fc295ed000000",
    "0x000000000000000000000000480378b64643906718ac00d919803c97074c7cb8000000000000000000000000000000000000000000002a5a058fc295ed000000",
    "0x000000000000000000000000e846ea34a7fe3a71434ee374e577f9afeb86e33e000000000000000000000000000000000000000000002a5a058fc295ed000000",
    "0x0000000000000000000000001ce5f224b00f57d3890b9afb40058e2abe93387f000000000000000000000000000000000000000000002a5a058fc295ed000000",
    "0x0000000000000000000000000ea07af6e4c92d607c985cf378f592e4cdeaa771000000000000000000000000000000000000000000002a5a058fc295ed000000",
    "0x0000000000000000000000005036bc301a2b8c196e64988a067b809dce1683ee000000000000000000000000000000000000000000002a5a058fc295ed000000",
    "0x0000000000000000000000003866b86b0974ad3edc11c9f407aff1574231a262000000000000000000000000000000000000000000002a5a058fc295ed000000",
    "0x0000000000000000000000005d136343083674f2cc947ad678543101d0140047000000000000000000000000000000000000000000002a5a058fc295ed000000",
    "0x0000000000000000000000001f58b16fdae8cbc39beb608a800716315e35dbef000000000000000000000000000000000000000000002a5a058fc295ed000000",
    "0x000000000000000000000000366315e7da54b5de968d3ea3bbafe74e0b13a908000000000000000000000000000000000000000000002a5a058fc295ed000000",
    "0x000000000000000000000000db6fd030ba528e457a60e5af1ae75efe47f1f4e0000000000000000000000000000000000000000000002a5a058fc295ed000000",
    "0x000000000000000000000000d9005cc3cf7f3a8af2d09bbb9b1833f342609c06000000000000000000000000000000000000000000002a5a058fc295ed000000",
    "0x000000000000000000000000bea01c83a88e1f1e335c50f28438e74ae50955d7000000000000000000000000000000000000000000002a5a058fc295ed000000",
    "0x00000000000000000000000054547cd5ed0a2261b476b973beb9b75d77563a29000000000000000000000000000000000000000000002a5a058fc295ed000000",
    "0x00000000000000000000000078442dfbf6052cd7811c9e2f7f278a14cc6c517b000000000000000000000000000000000000000000002a5a058fc295ed000000",
    "0x000000000000000000000000a8ebf68242545a25650ac1cbb3deb6bb60f64f2b000000000000000000000000000000000000000000002a5a058fc295ed000000",
    "0x000000000000000000000000085e3421275eb85259801b1c0efd77d8d7e4e18f000000000000000000000000000000000000000000002a5a058fc295ed000000",
    "0x0000000000000000000000005aa5c6c91fd597602fab4b55bbf401a1fcfc2a40000000000000000000000000000000000000000000002a5a058fc295ed000000",
    "0x000000000000000000000000e969065217b69ed68718f88fd07c2127804d75cd0000000000000000000000000000000000000000000022256148b4e27a480000",
    "0x000000000000000000000000f36bc9c62e8a9271ebcbeb991d247634579a0399000000000000000000000000000000000000000000001d61a70eeefe69380000",
    "0x000000000000000000000000c0432ce6f9641aa90ccdef041dc2e06c8da617d60000000000000000000000000000000000000000000018c6952c6b6ebf200000",
    "0x0000000000000000000000006ab2cc6f02fe1518e85dd98eabd2cbaeb958a07700000000000000000000000000000000000000000000156338918f10d5200000",
    "0x000000000000000000000000a95ad8839daf60fdfc1a03097554d92e2681daf800000000000000000000000000000000000000000000152d02c7e14af6800000",
    "0x000000000000000000000000d60b33f863fe42f1036aca16f4331e1385ff6a2800000000000000000000000000000000000000000000152d02c7e14af6800000",
    "0x000000000000000000000000b0656d8a0eff9afcbc05aa81f159e6d22bfae66200000000000000000000000000000000000000000000152d02c7e14af6800000",
    "0x000000000000000000000000cc4103096a78af56f73ce7d311def2565fecd5db00000000000000000000000000000000000000000000152d02c7e14af6800000",
    "0x000000000000000000000000b55b680593901ecd345e658cd6180096c76ebb6800000000000000000000000000000000000000000000152d02c7e14af6800000",
    "0x000000000000000000000000d9a7714a80a4e872c9b48ddb5e65adee30fef4d100000000000000000000000000000000000000000000152d02c7e14af6800000",
    "0x000000000000000000000000f467d378e5fe5aca8af134549cea66224b1629a000000000000000000000000000000000000000000000152d02c7e14af6800000",
    "0x0000000000000000000000002449196a3aa3b870c0e44a845599bc966f6a61b600000000000000000000000000000000000000000000152d02c7e14af6800000",
    "0x0000000000000000000000001d816288f4c6d0cd9c12e89a129843c61ebda091000000000000000000000000000000000000000000000ffcdcfabfdb28300000",
    "0x000000000000000000000000df0934baca689306185b225897075ef8bb11f7f7000000000000000000000000000000000000000000000ed2b525841adfc00000",
    "0x0000000000000000000000000029c0c32a37c69d54d4cceb728faad4bb9f5a4c000000000000000000000000000000000000000000000c587307795c99700000",
    "0x000000000000000000000000a1606ba1699cbb813c8ea5038ea3d313df6f9785000000000000000000000000000000000000000000000bdbc41e0348b3000000",
    "0x000000000000000000000000d07fb305af33491328505d8b35f4e7af738f0640000000000000000000000000000000000000000000000bbb3d71ce3860a00000",
    "0x000000000000000000000000dc0ba5a757c9b111b078a33e1eb875e97fbcb5b7000000000000000000000000000000000000000000000ba58e545582d4600000",
    "0x000000000000000000000000a3af35d1cecd6c32c573a329e36da328b16b5d77000000000000000000000000000000000000000000000accb72d9e6b59e00000",
    "0x00000000000000000000000064969307809b77e7eb00304f8b849c6f18f6f93b000000000000000000000000000000000000000000000ab19c48c7886a900000",
    "0x0000000000000000000000001724ca35c45565e22ad65763f08c2cace97e330b000000000000000000000000000000000000000000000aa158f2ad0041600000",
    "0x0000000000000000000000008c78a450981b267c12e6d872d95659cc29229deb000000000000000000000000000000000000000000000a968163f0a57b400000",
    "0x0000000000000000000000009b393097444f136ab34079db148c1308f59a3f6e000000000000000000000000000000000000000000000a968163f0a57b400000",
    "0x000000000000000000000000b504f6a0dd0166aeb13af332bfa27cfc7f44dc88000000000000000000000000000000000000000000000a968163f0a57b400000",
    "0x00000000000000000000000090c0fcdc7e393f33977c8ef091c34bb74985ee6d000000000000000000000000000000000000000000000a968163f0a57b400000",
    "0x000000000000000000000000e4b5b2667e049ac8c79ae6c5a7e3300815aa32be000000000000000000000000000000000000000000000a968163f0a57b400000",
    "0x000000000000000000000000f6adc57e8d511dd9f711f1aab2766b2305003840000000000000000000000000000000000000000000000a968163f0a57b400000",
    "0x000000000000000000000000bc8b07601212add631125d393d5e227bd947ddfd000000000000000000000000000000000000000000000a968163f0a57b400000",
    "0x0000000000000000000000009e90cc8dfa1fc6fadae3bfa8aa13ae140d13f228000000000000000000000000000000000000000000000a968163f0a57b400000",
    "0x0000000000000000000000006de0666638cf31c0f7d8db6ec892ca0b7d8dcf94000000000000000000000000000000000000000000000a968163f0a57b400000",
    "0x0000000000000000000000001a718b59899933f813081712b95eadd6a97655a2000000000000000000000000000000000000000000000878678326eac9000000",
    "0x0000000000000000000000003cd687d877f464a93797a908c2ae1dcbfacbcdcc0000000000000000000000000000000000000000000007f0e10af47c1c700000",
    "0x00000000000000000000000016070e25bf083b2bc031a6bc7032285648fc1e540000000000000000000000000000000000000000000006e73fe1edcc26600000",
    "0x00000000000000000000000075f527144aecf26c39209a1dec9fad531909650000000000000000000000000000000000000000000000054b40b1f852bda00000",
    "0x000000000000000000000000c10354284bfcc2fd44053d9ffa7906466a962ce700000000000000000000000000000000000000000000054b40b1f852bda00000",
    "0x000000000000000000000000696fe200228c123553b90fd0f2dd005e29a816ce00000000000000000000000000000000000000000000032d26d12e980b600000",
    "0x000000000000000000000000db38f43daccaaaefe28249943bde3046999410d200000000000000000000000000000000000000000000021e19e0c9bab2400000",
    "0x000000000000000000000000b0c65e2541bcf0f3e577a78d0df8522a38494ff400000000000000000000000000000000000000000000000ad78ebc5ac6200000",
    "0x000000000000000000000000daae07803e1f835b203369f733478936043d10ee0000000000000000000000000000000000000000000000004563918244f40000",
    "0x0000000000000000000000006a321f5e1935e2ec451ad146a26ba81c20fc8ec70000000000000000000000000000000000000000000000004563918244f40000",
    "0x0000000000000000000000007530c8039bcfac7b39fd785b009061443b5fd5840000000000000000000000000000000000000000000000004563918244f40000",
];
// Using keccak256 as the hashing algorithm, create a Merkle Tree
// We use keccak256 because Solidity supports it
// We can use keccak256 directly in smart contracts for verification
// Make sure to sort the tree so it can be reproduced deterministically each time
const merkleTree = new MerkleTree(list, keccak256, {
    hashLeaves: true, // Hash each leaf using keccak256 to make them fixed-size
    sortPairs: true, // Sort the tree for determinstic output
    sortLeaves: true,
});

function encodeLeaf(address, amount) {
    // Same as `abi.encodePacked` in Solidity
    return ethers.utils.defaultAbiCoder.encode(
        ["address", "uint256"], // The datatypes of arguments to encode
        [address, amount] // The actual values
    );
}

// Compute the Merkle Root in Hexadecimal
const root = merkleTree.getHexRoot();
console.log(root);
// Check for valid addresses
for (let i = 0; i < list2.length; i++) {
    // Compute the Merkle Proof for `testAddresses[i]`
    const leaf = keccak256(list2[i]); // The hash of the node

    const proof = merkleTree.getHexProof(leaf); // Get the Merkle Proof
    console.log(merkleTree.verify(proof, leaf, root)); // Verify the Merkle Proof
}

console.log(merkleTree.toString());
